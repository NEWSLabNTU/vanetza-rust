# [allow (non_snake_case)] # [allow (dead_code)] # [allow (non_upper_case_globals)] # [allow (non_camel_case_types)] mod ffi { pub trait ToCppString { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > ; } impl ToCppString for & str { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (& self) } } impl ToCppString for & String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for cxx :: UniquePtr < cxx :: CxxString > { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { self } } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: PositionFix { type Id = cxx :: type_id ! ("vanetza::PositionFix") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: MacAddress { type Id = cxx :: type_id ! ("vanetza::MacAddress") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: ChunkPacket { type Id = cxx :: type_id ! ("vanetza::ChunkPacket") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: CohesivePacket { type Id = cxx :: type_id ! ("vanetza::CohesivePacket") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: StationType { type Id = cxx :: type_id ! ("vanetza::geonet::StationType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Address { type Id = cxx :: type_id ! ("vanetza::geonet::Address") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: LongPositionVector { type Id = cxx :: type_id ! ("vanetza::geonet::LongPositionVector") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: ShortPositionVector { type Id = cxx :: type_id ! ("vanetza::geonet::ShortPositionVector") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Lifetime { type Id = cxx :: type_id ! ("vanetza::geonet::Lifetime") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: TrafficClass { type Id = cxx :: type_id ! ("vanetza::geonet::TrafficClass") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: UnicastForwarding { type Id = cxx :: type_id ! ("vanetza::geonet::UnicastForwarding") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: BroadcastForwarding { type Id = cxx :: type_id ! ("vanetza::geonet::BroadcastForwarding") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: AddrConfMethod { type Id = cxx :: type_id ! ("vanetza::geonet::AddrConfMethod") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: InterfaceType { type Id = cxx :: type_id ! ("vanetza::geonet::InterfaceType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: SecurityDecapHandling { type Id = cxx :: type_id ! ("vanetza::geonet::SecurityDecapHandling") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: ManagementInformationBase { type Id = cxx :: type_id ! ("vanetza::geonet::ManagementInformationBase") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: CartesianPosition { type Id = cxx :: type_id ! ("vanetza::geonet::CartesianPosition") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: GeodeticPosition { type Id = cxx :: type_id ! ("vanetza::geonet::GeodeticPosition") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Circle { type Id = cxx :: type_id ! ("vanetza::geonet::Circle") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Rectangle { type Id = cxx :: type_id ! ("vanetza::geonet::Rectangle") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Ellipse { type Id = cxx :: type_id ! ("vanetza::geonet::Ellipse") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: UpperProtocol { type Id = cxx :: type_id ! ("vanetza::geonet::UpperProtocol") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: TransportType { type Id = cxx :: type_id ! ("vanetza::geonet::TransportType") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: DataRequestWithAddress { type Id = cxx :: type_id ! ("vanetza::geonet::DataRequestWithAddress") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: DataRequestWithArea { type Id = cxx :: type_id ! ("vanetza::geonet::DataRequestWithArea") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: GucDataRequest { type Id = cxx :: type_id ! ("vanetza::geonet::GucDataRequest") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: GbcDataRequest { type Id = cxx :: type_id ! ("vanetza::geonet::GbcDataRequest") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: GacDataRequest { type Id = cxx :: type_id ! ("vanetza::geonet::GacDataRequest") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: ShbDataRequest { type Id = cxx :: type_id ! ("vanetza::geonet::ShbDataRequest") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: TsbDataRequest { type Id = cxx :: type_id ! ("vanetza::geonet::TsbDataRequest") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: Router { type Id = cxx :: type_id ! ("vanetza::geonet::Router") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: DataConfirm { type Id = cxx :: type_id ! ("vanetza::geonet::DataConfirm") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: DataConfirm_ResultCode { type Id = cxx :: type_id ! ("vanetza::geonet::DataConfirm::ResultCode") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: DataIndication { type Id = cxx :: type_id ! ("vanetza::geonet::DataIndication") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: btp :: HeaderA { type Id = cxx :: type_id ! ("vanetza::btp::HeaderA") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: btp :: HeaderB { type Id = cxx :: type_id ! ("vanetza::btp::HeaderB") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: btp :: DataRequestGeoNetParams { type Id = cxx :: type_id ! ("vanetza::btp::DataRequestGeoNetParams") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: btp :: DataRequestA { type Id = cxx :: type_id ! ("vanetza::btp::DataRequestA") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: btp :: DataRequestB { type Id = cxx :: type_id ! ("vanetza::btp::DataRequestB") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: PacketVariantWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::PacketVariantWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: AccelerationWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::AccelerationWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: AngleWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::AngleWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: GeoAngleWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::GeoAngleWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: TrueNorthWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::TrueNorthWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: AngularVelocityWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::AngularVelocityWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: AreaWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::AreaWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: CurvatureWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::CurvatureWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: FrequencyWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::FrequencyWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: LengthWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::LengthWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: DurationWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::DurationWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: VelocityWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::VelocityWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::units::NauticalVelocityWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::GeonetAreaWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::GeodeticPositionWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::CartesianPositionWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: CircleWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::CircleWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: RectangleWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::RectangleWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: EllipseWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::EllipseWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: geonet :: RouterRef { type Id = cxx :: type_id ! ("vanetza_wrapper::geonet::RouterRef") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::btp::BtpDataIndicationWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: btp :: HeaderB_wrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::btp::HeaderB_wrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::convertible::BTPHeaderAbyte_buffer_implWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper { type Id = cxx :: type_id ! ("vanetza_wrapper::convertible::BTPHeaderBbyte_buffer_implWrapper") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: CbfPacketBuffer { type Id = cxx :: type_id ! ("vanetza::geonet::CbfPacketBuffer") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: geonet :: LocationTable { type Id = cxx :: type_id ! ("vanetza::geonet::LocationTable") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: OutputArchive { type Id = cxx :: type_id ! ("vanetza::OutputArchive") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: InputArchive { type Id = cxx :: type_id ! ("vanetza::InputArchive") ; type Kind = cxx :: kind :: Opaque ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: OsiLayer { type Id = cxx :: type_id ! ("vanetza::OsiLayer") ; type Kind = cxx :: kind :: Trivial ; } unsafe impl cxx :: ExternType for bindgen :: root :: vanetza :: ByteBufferConvertible { type Id = cxx :: type_id ! ("vanetza::ByteBufferConvertible") ; type Kind = cxx :: kind :: Opaque ; } mod bindgen { pub (super) mod root { pub unsafe fn btpb_write (interface : impl ToCppString , buf : * mut autocxx :: c_void , len : usize) -> autocxx :: c_int { cxxbridge :: btpb_write_autocxx_wrapper_0xaf96dc19e4649ed1 (interface . into_cpp () , buf , len) } pub unsafe fn btpb_read (interface : impl ToCppString , buff : * mut cxx :: CxxVector < u8 >) -> autocxx :: c_int { cxxbridge :: btpb_read_autocxx_wrapper_0xaf96dc19e4649ed1 (interface . into_cpp () , buff) } pub type uint_fast32_t = autocxx :: c_ulong ; pub use cxxbridge :: std_initializer_list_uint8_t_AutocxxConcrete ; pub mod vanetza { pub type ItsAid = u32 ; # [repr (C , align (8))] pub struct PositionFix { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 104] } # [repr (C)] pub struct MacAddress { pub _base : u8 , pub octets : [u8 ; 6usize] , } # [doc = " \\brief ChunckPacket is a packet consisting of several memory chunks\n\n ChunkPacket is the preferred packet type when it is getting assembled step by step.\n Each layer can easily add further bytes without caring about other layers at all."] # [repr (C , align (8))] pub struct ChunkPacket { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [doc = " A cohesive packet is stored in contiguous memory"] # [repr (C , align (8))] pub struct CohesivePacket { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 88] } pub use cxxbridge :: PacketVariant ; # [doc = " \\brief ChunckPacket is a packet consisting of several memory chunks\n\n ChunkPacket is the preferred packet type when it is getting assembled step by step.\n Each layer can easily add further bytes without caring about other layers at all."] pub type DownPacket = root :: vanetza :: ChunkPacket ; pub use cxxbridge :: Runtime ; # [doc = " This is a drop-in replacement for boost::archive::binary_oarchive"] # [repr (C , align (8))] pub struct OutputArchive { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [doc = " This is a drop-in replacement for boost::archive::binary_iarchive"] # [repr (C , align (8))] pub struct InputArchive { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (u8)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum OsiLayer { Physical = 1 , Link = 2 , Network = 3 , Transport = 4 , Session = 5 , Presentation = 6 , Application = 7 , } # [doc = " ByteBufferConvertible is an extensible mechanism for providing\n ByteBuffer representations of various data structures and objects.\n\n ByteBufferConvertible utilizes type erasure and accesses byte buffer data\n through the convertible::byte_buffer interface.\n Extending ByteBufferConvertible is possible by providing specializations\n of convertible::byte_buffer_impl<T> implementing convertible::byte_buffer."] # [repr (C , align (8))] pub struct ByteBufferConvertible { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } pub type ByteBuffer = cxx :: CxxVector < u8 > ; impl MacAddress { # [doc = "autocxx bindings couldn't be generated: Function operator_equals has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals1 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_MacAddress_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } pub fn new1 < 'a > (args : impl autocxx :: ValueParam < root :: std_initializer_list_uint8_t_AutocxxConcrete > + 'a) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (args) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_MacAddress_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } } impl ChunkPacket { # [doc = "autocxx bindings couldn't be generated: Function operator_equals has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Get size of whole payload\n \\return payload size in bytes"] pub fn size (self : & root :: vanetza :: ChunkPacket) -> usize { cxxbridge :: vanetza_ChunkPacket_size_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } # [doc = " Extract a range of layers from this packet to a new one.\n The respective layers of this ChunkPacket are empty afterwards.\n \\param from start at this layer (inclusive)\n \\param to stop at this layer (inclusive)\n \\return new packet containing layers of specified range"] pub fn extract < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: vanetza :: ChunkPacket > , from : root :: vanetza :: OsiLayer , to : root :: vanetza :: OsiLayer) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: ChunkPacket > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: extract_autocxx_wrapper_0xaf96dc19e4649ed1 (self , from , to , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: Function merge has a mutable reference return value, but >1 input mutable reference parameters, so the lifetime of the output reference cannot be deduced."] fn merge (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_ChunkPacket_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl CohesivePacket { # [doc = "autocxx bindings couldn't be generated: Function operator_equals has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: autocxx does not know how to generate bindings to operator="] fn operator_equals1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Get size of whole packet\n \\return length in bytes"] pub fn size (self : & root :: vanetza :: CohesivePacket) -> usize { cxxbridge :: vanetza_CohesivePacket_size_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } # [doc = " Get size of a single layer in packet\n \\param single_layer which layer has to be considered\n \\return length in bytes"] pub fn size1 (self : & root :: vanetza :: CohesivePacket , single_layer : root :: vanetza :: OsiLayer) -> usize { cxxbridge :: vanetza_CohesivePacket_size1_autocxx_wrapper_0xaf96dc19e4649ed1 (self , single_layer) } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn reset_iterators (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn rebuild_iterators (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn get (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn get1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = " Create packet from buffer and assign all bytes to given layer\n \\param buffer copy data from this buffer\n \\param layer all bytes belong to this layer (at least at first)"] pub fn new < 'a > (buffer : & 'a cxx :: CxxVector < u8 > , layer : root :: vanetza :: OsiLayer) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_CohesivePacket_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , buffer , layer) }) } } pub fn new1 (buffer : impl autocxx :: RValueParam < cxx :: CxxVector < u8 > > , layer : root :: vanetza :: OsiLayer) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (buffer) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_CohesivePacket_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr () , layer) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: PositionFix { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: PositionFix { cxxbridge :: PositionFix_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: PositionFix) { cxxbridge :: PositionFix_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: MacAddress { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: MacAddress { cxxbridge :: MacAddress_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: MacAddress) { cxxbridge :: MacAddress_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: ChunkPacket { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: ChunkPacket { cxxbridge :: ChunkPacket_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: ChunkPacket) { cxxbridge :: ChunkPacket_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: CohesivePacket { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: CohesivePacket { cxxbridge :: CohesivePacket_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: CohesivePacket) { cxxbridge :: CohesivePacket_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: MacAddress { unsafe fn copy_new (arg1 : & root :: vanetza :: MacAddress , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: MacAddress > >) { cxxbridge :: vanetza_MacAddress_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: MacAddress { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: MacAddress > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: MacAddress > >) { cxxbridge :: vanetza_MacAddress_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: ChunkPacket { unsafe fn copy_new (arg1 : & root :: vanetza :: ChunkPacket , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: ChunkPacket > >) { cxxbridge :: vanetza_ChunkPacket_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: ChunkPacket { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: ChunkPacket > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: ChunkPacket > >) { cxxbridge :: vanetza_ChunkPacket_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: CohesivePacket { unsafe fn copy_new (arg1 : & root :: vanetza :: CohesivePacket , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: CohesivePacket > >) { cxxbridge :: vanetza_CohesivePacket_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: CohesivePacket { unsafe fn move_new (mut arg1 : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: CohesivePacket > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: CohesivePacket > >) { cxxbridge :: vanetza_CohesivePacket_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (arg1 . as_mut ()) ; r }) } } impl Drop for root :: vanetza :: MacAddress { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: MacAddress) { unsafe { cxxbridge :: MacAddress_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: ChunkPacket { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: ChunkPacket) { unsafe { cxxbridge :: ChunkPacket_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: CohesivePacket { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: CohesivePacket) { unsafe { cxxbridge :: CohesivePacket_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: PositionFix { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: PositionFix) { unsafe { cxxbridge :: PositionFix_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: OutputArchive { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: OutputArchive { cxxbridge :: OutputArchive_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: OutputArchive) { cxxbridge :: OutputArchive_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: OutputArchive { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: OutputArchive > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: OutputArchive > >) { cxxbridge :: vanetza_OutputArchive_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: OutputArchive { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: OutputArchive , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: OutputArchive > >) { cxxbridge :: vanetza_OutputArchive_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: InputArchive { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: InputArchive { cxxbridge :: InputArchive_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: InputArchive) { cxxbridge :: InputArchive_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: InputArchive { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: InputArchive > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: InputArchive > >) { cxxbridge :: vanetza_InputArchive_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: InputArchive { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: InputArchive , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: InputArchive > >) { cxxbridge :: vanetza_InputArchive_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: ByteBufferConvertible { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: ByteBufferConvertible { cxxbridge :: ByteBufferConvertible_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: ByteBufferConvertible) { cxxbridge :: ByteBufferConvertible_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: ByteBufferConvertible { unsafe fn copy_new (arg1 : & root :: vanetza :: ByteBufferConvertible , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: ByteBufferConvertible > >) { cxxbridge :: vanetza_ByteBufferConvertible_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: ByteBufferConvertible { unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: ByteBufferConvertible > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: ByteBufferConvertible > >) { cxxbridge :: vanetza_ByteBufferConvertible_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } pub mod aid { # [doc = " ITS-AID assigned for ETSI ITS\n \\see TS 102 965 V2.1.1 Annex A"] pub const CA : root :: vanetza :: ItsAid = 36 ; pub const DEN : root :: vanetza :: ItsAid = 37 ; pub const TLM : root :: vanetza :: ItsAid = 137 ; pub const RLT : root :: vanetza :: ItsAid = 138 ; pub const IVI : root :: vanetza :: ItsAid = 139 ; pub const TLC_R : root :: vanetza :: ItsAid = 140 ; pub const TLC_S : root :: vanetza :: ItsAid = 637 ; pub const GN_MGMT : root :: vanetza :: ItsAid = 141 ; pub const CRL : root :: vanetza :: ItsAid = 622 ; pub const SCR : root :: vanetza :: ItsAid = 623 ; pub const CTL : root :: vanetza :: ItsAid = 624 ; pub const VRU : root :: vanetza :: ItsAid = 638 ; pub const CP : root :: vanetza :: ItsAid = 639 ; pub const IMZ : root :: vanetza :: ItsAid = 640 ; pub const SA : root :: vanetza :: ItsAid = 540801 ; pub const GPC : root :: vanetza :: ItsAid = 540802 ; pub const IPV6_ROUTING : root :: vanetza :: ItsAid = 270549118 ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod btp { # [repr (C , align (2))] pub struct HeaderA { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 4] } # [repr (C , align (2))] pub struct HeaderB { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 4] } # [repr (C , align (8))] pub struct DataRequestGeoNetParams { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 120] } # [repr (C , align (8))] pub struct DataRequestA { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } # [repr (C , align (8))] pub struct DataRequestB { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 128] } impl DataRequestA { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_btp_DataRequestA_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl DataRequestB { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_btp_DataRequestB_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl HeaderA { # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_btp_HeaderA_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl HeaderB { # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_btp_HeaderB_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: btp :: HeaderA { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: btp :: HeaderA { cxxbridge :: HeaderA_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: btp :: HeaderA) { cxxbridge :: HeaderA_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: btp :: HeaderB { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: btp :: HeaderB { cxxbridge :: HeaderB_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: btp :: HeaderB) { cxxbridge :: HeaderB_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: btp :: DataRequestGeoNetParams { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: btp :: DataRequestGeoNetParams { cxxbridge :: DataRequestGeoNetParams_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: btp :: DataRequestGeoNetParams) { cxxbridge :: DataRequestGeoNetParams_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: btp :: DataRequestA { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: btp :: DataRequestA { cxxbridge :: DataRequestA_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: btp :: DataRequestA) { cxxbridge :: DataRequestA_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: btp :: DataRequestB { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: btp :: DataRequestB { cxxbridge :: DataRequestB_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: btp :: DataRequestB) { cxxbridge :: DataRequestB_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: btp :: HeaderA { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: btp :: HeaderA > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: btp :: HeaderA > >) { cxxbridge :: vanetza_btp_HeaderA_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: btp :: HeaderA { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: btp :: HeaderA , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: btp :: HeaderA > >) { cxxbridge :: vanetza_btp_HeaderA_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: btp :: HeaderA { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: btp :: HeaderA) { unsafe { cxxbridge :: HeaderA_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: btp :: HeaderB { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: btp :: HeaderB > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: btp :: HeaderB > >) { cxxbridge :: vanetza_btp_HeaderB_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: btp :: HeaderB { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: btp :: HeaderB , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: btp :: HeaderB > >) { cxxbridge :: vanetza_btp_HeaderB_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: btp :: HeaderB { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: btp :: HeaderB) { unsafe { cxxbridge :: HeaderB_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: btp :: DataRequestGeoNetParams { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: btp :: DataRequestGeoNetParams) { unsafe { cxxbridge :: DataRequestGeoNetParams_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: btp :: DataRequestA { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: btp :: DataRequestA) { unsafe { cxxbridge :: DataRequestA_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: btp :: DataRequestB { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: btp :: DataRequestB) { unsafe { cxxbridge :: DataRequestB_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod dcc { pub use cxxbridge :: RequestInterface ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod geonet { # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum StationType { Unknown = 0 , Pedestrian = 1 , Cyclist = 2 , Moped = 3 , Motorcycle = 4 , Passenger_Car = 5 , Bus = 6 , Light_Truck = 7 , Heavy_Truck = 8 , Trailer = 9 , Special_Vehicle = 10 , Tram = 11 , RSU = 15 , } # [repr (C)] pub struct Address { m_manually_configured : bool , m_station_type : root :: vanetza :: geonet :: StationType , m_country_code : u32 , m_mid : root :: vanetza :: MacAddress , } # [repr (C , align (8))] pub struct LongPositionVector { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 56] } # [repr (C , align (4))] pub struct ShortPositionVector { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 32] } # [repr (C)] pub struct Lifetime { pub _base : u8 , m_lifetime : u8 , } # [repr (C)] pub struct TrafficClass { m_tc : u8 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum UnicastForwarding { Unspecified = 0 , Greedy = 1 , CBF = 2 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum BroadcastForwarding { Unspecified = 0 , SIMPLE = 1 , CBF = 2 , Advanced = 3 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum AddrConfMethod { Auto = 0 , Managed = 1 , Anonymous = 2 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum InterfaceType { Unspecified = 0 , ITS_G5 = 1 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum SecurityDecapHandling { Strict = 0 , Non_Strict = 1 , } # [doc = " The Management Information Base (MIB) defines the GeoNetworking protocol constants.\n\n \\see EN 302 636-4-1 v1.3.1 Annex H"] # [repr (C , align (8))] pub struct ManagementInformationBase { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 264] } # [doc = " Cartesian position.\n As it is not strictly specified in any GeoNet standard document,\n I define it as point in an ENU coordinate system and its units as meters."] # [repr (C , align (8))] pub struct CartesianPosition { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct GeodeticPosition { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct Circle { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct Rectangle { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct Ellipse { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: vanetza::units::Area, vanetza::geonet::Area)"] pub struct Area ; # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum UpperProtocol { Unknown = 0 , BTP_A = 1 , BTP_B = 2 , IPv6 = 3 , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum TransportType { GUC = 0 , GAC = 1 , GBC = 2 , TSB = 3 , SHB = 4 , } # [doc = "autocxx bindings couldn't be generated: This item name is used in multiple namespaces. At present, autocxx and cxx allow only one type of a given name. This limitation will be fixed in future. (Items found with this name: vanetza::geonet::DataRequest, vanetza::dcc::DataRequest)"] pub struct DataRequest ; # [repr (C , align (8))] pub struct DataRequestWithAddress { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 72] } # [repr (C , align (8))] pub struct DataRequestWithArea { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 96] } # [repr (C , align (8))] pub struct GucDataRequest { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 72] } # [repr (C , align (8))] pub struct GbcDataRequest { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 96] } # [repr (C , align (8))] pub struct GacDataRequest { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 96] } # [repr (C , align (8))] pub struct ShbDataRequest { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [repr (C , align (8))] pub struct TsbDataRequest { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [doc = " Router is the central entity for GeoNet communication\n\n Incoming and outgoing GeoNet packets are handled by the router.\n It may even dispatch own packets (beacons) if necessary.\n\n This implementation follows EN 302 636-4-1 v1.3.1"] # [repr (C , align (8))] pub struct Router { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 5768] } # [repr (C)] pub struct DataConfirm { pub result_code : root :: vanetza :: geonet :: DataConfirm_ResultCode , } # [repr (i32)] # [derive (Clone , Hash , PartialEq , Eq)] pub enum DataConfirm_ResultCode { Accepted = 0 , Rejected_Max_SDU_Size = 1 , Rejected_Max_Lifetime = 2 , Rejected_Min_Repetition_Interval = 3 , Rejected_Unsupported_Traffic_Class = 4 , Rejected_Max_Geo_Area_Size = 5 , Rejected_Unspecified = 6 , } pub use cxxbridge :: TransportInterface ; # [repr (C , align (8))] pub struct DataIndication { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 160] } # [doc = " Derive cartesian position ENU from geodetic WGS84 coordinates\n and a WGS84 reference point which becomes the cartesian origin.\n \\param origin WGS84 reference point becoming origin\n \\param position Calculate cartesian coordinates for this point\n \\return Cartesian coordinates of position relative to origin"] pub fn local_cartesian < 'a > (origin : & 'a root :: vanetza :: geonet :: GeodeticPosition , position : & 'a root :: vanetza :: geonet :: GeodeticPosition) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: CartesianPosition > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: local_cartesian_autocxx_wrapper_0xaf96dc19e4649ed1 (origin , position , placement_return_type) }) } } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::Area"] pub struct inside_or_at_border ; pub type Router_DownPacketPtr = cxx :: UniquePtr < root :: vanetza :: DownPacket > ; pub use cxxbridge :: DccFieldGenerator ; # [doc = " The Management Information Base (MIB) defines the GeoNetworking protocol constants.\n\n \\see EN 302 636-4-1 v1.3.1 Annex H"] pub type MIB = root :: vanetza :: geonet :: ManagementInformationBase ; # [doc = " CbfPacketBuffer facilitates implementation of contention based forwarding"] # [repr (C , align (8))] pub struct CbfPacketBuffer { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 200] } # [doc = " GeoNetworking LocationTable\n See section 7.1 of EN 302 636-4-1 for details."] # [repr (C , align (8))] pub struct LocationTable { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 120] } impl Address { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn country_code (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn country_code1 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Address_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } pub fn new1 < 'a > (arg1 : & 'a root :: vanetza :: MacAddress) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Address_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , arg1) }) } } } impl LongPositionVector { pub fn position < 'a > (self : & 'a root :: vanetza :: geonet :: LongPositionVector) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: GeodeticPosition > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_LongPositionVector_position_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_LongPositionVector_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl ShortPositionVector { # [doc = "autocxx bindings couldn't be generated: Function operator_equals has a reference return value, but >1 input reference parameters, so the lifetime of the output reference cannot be deduced."] fn operator_equals (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_ShortPositionVector_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } pub fn new2 < 'a > (arg1 : & 'a root :: vanetza :: geonet :: LongPositionVector) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_ShortPositionVector_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , arg1) }) } } } impl Lifetime { pub fn zero () -> root :: vanetza :: geonet :: Lifetime { cxxbridge :: zero_autocxx_wrapper_0xaf96dc19e4649ed1 () } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn set (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn raw (self : & root :: vanetza :: geonet :: Lifetime) -> u8 { cxxbridge :: vanetza_geonet_Lifetime_raw_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a type marked as blocked! (vanetza::units::Duration)"] fn decode (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument arg1: Found an attempt at using a type marked as blocked! (vanetza::units::Duration)"] fn encode (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Lifetime_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl TrafficClass { # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn tc_id (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn tc_id1 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn raw (self : & root :: vanetza :: geonet :: TrafficClass) -> u8 { cxxbridge :: vanetza_geonet_TrafficClass_raw_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_TrafficClass_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } # [doc = "autocxx bindings couldn't be generated: This function or method uses a type where one of the template parameters was incomprehensible to bindgen/autocxx - probably because it uses template specialization."] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new2 (raw : u8) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_TrafficClass_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , raw) }) } } } impl ManagementInformationBase { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_ManagementInformationBase_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl CartesianPosition { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_CartesianPosition_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument x_: Found an attempt at using a type marked as blocked! (vanetza::units::Length)"] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl GeodeticPosition { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_GeodeticPosition_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument lat: Found an attempt at using a type marked as blocked! (vanetza::units::GeoAngle)"] fn new1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Circle { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Circle_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl Rectangle { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Rectangle_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl Ellipse { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Ellipse_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } impl DataRequest { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::DataRequest"] fn vanetza_geonet_DataRequest_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl Router { # [doc = " \\brief Request to send payload per single hop broadcast (SHB).\n If security is enabled, the message gets encapsulated in a security envelope.\n Returns whether data was valid to be sent.\n\n \\param request\n \\param payload from upper layers\n \\return result code if packet has been accepted"] pub fn request (self : :: core :: pin :: Pin < & mut root :: vanetza :: geonet :: Router > , arg1 : & root :: vanetza :: geonet :: ShbDataRequest , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) -> root :: vanetza :: geonet :: DataConfirm { cxxbridge :: request_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } # [doc = " \\brief Request to send payload per GeoBroadcast (GBC).\n If security is enabled, the message gets encapsulated in a security envelope.\n Returns whether data was valid to be sent.\n\n \\param request\n \\param payload from upper layers\n \\return result code if packet has been accepted"] pub fn request1 (self : :: core :: pin :: Pin < & mut root :: vanetza :: geonet :: Router > , arg1 : & root :: vanetza :: geonet :: GbcDataRequest , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) -> root :: vanetza :: geonet :: DataConfirm { cxxbridge :: request1_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } pub fn request2 (self : :: core :: pin :: Pin < & mut root :: vanetza :: geonet :: Router > , arg1 : & root :: vanetza :: geonet :: GucDataRequest , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) -> root :: vanetza :: geonet :: DataConfirm { cxxbridge :: request2_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } pub fn request3 (self : :: core :: pin :: Pin < & mut root :: vanetza :: geonet :: Router > , arg1 : & root :: vanetza :: geonet :: GacDataRequest , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) -> root :: vanetza :: geonet :: DataConfirm { cxxbridge :: request3_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } pub fn request4 (self : :: core :: pin :: Pin < & mut root :: vanetza :: geonet :: Router > , arg1 : & root :: vanetza :: geonet :: TsbDataRequest , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) -> root :: vanetza :: geonet :: DataConfirm { cxxbridge :: request4_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument arg1: Found an attempt at using a forward declaration (vanetza::PacketVariant) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn indicate (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a forward declaration (vanetza::geonet::NextHop) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn forwarding_algorithm_selection (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn on_beacon_timer_expired (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn reset_beacon_timer (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn reset_beacon_timer1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn indicate_basic (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn indicate_common (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn indicate_extended (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn indicate_secured (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn process_extended (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn process_extended1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn process_extended2 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn flush_broadcast_forwarding_buffer (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn flush_unicast_forwarding_buffer (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn execute_media_procedures (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn execute_itsg5_procedures (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn pass_down (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn pass_down1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument arg2: Found an attempt at using a forward declaration (vanetza::PacketVariant) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn pass_up (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn decide_pass_up (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn detect_duplicate_address (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn detect_duplicate_packet (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a forward declaration (vanetza::geonet::NextHop) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn greedy_forwarding (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a forward declaration (vanetza::geonet::NextHop) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn non_area_contention_based_forwarding (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a forward declaration (vanetza::geonet::NextHop) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn area_contention_based_forwarding (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a type marked as blocked! (vanetza::units::Duration)"] fn timeout_cbf (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a type marked as blocked! (vanetza::units::Duration)"] fn timeout_cbf1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: Found an attempt at using a forward declaration (vanetza::geonet::NextHop) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn area_advanced_forwarding (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn dispatch_repetition (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn encap_packet (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn create_shb_pdu (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn create_beacon_pdu (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This method is private"] fn create_gbc_pdu (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new < 'a > (arg1 : :: core :: pin :: Pin < & 'a mut root :: vanetza :: Runtime > , arg2 : & 'a root :: vanetza :: geonet :: ManagementInformationBase) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_Router_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , arg1 , arg2) }) } } } impl DataConfirm { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_DataConfirm_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } pub fn new1 (code : root :: vanetza :: geonet :: DataConfirm_ResultCode) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_geonet_DataConfirm_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , code) }) } } } impl TransportInterface { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument arg2: Found an attempt at using a forward declaration (vanetza::PacketVariant) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn indicate (_uhoh : autocxx :: BindingGenerationFailure) { } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Address { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Address { cxxbridge :: Address_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Address) { cxxbridge :: Address_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: LongPositionVector { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: LongPositionVector { cxxbridge :: LongPositionVector_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: LongPositionVector) { cxxbridge :: LongPositionVector_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: ShortPositionVector { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: ShortPositionVector { cxxbridge :: ShortPositionVector_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: ShortPositionVector) { cxxbridge :: ShortPositionVector_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Lifetime { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Lifetime { cxxbridge :: Lifetime_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Lifetime) { cxxbridge :: Lifetime_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: TrafficClass { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: TrafficClass { cxxbridge :: TrafficClass_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: TrafficClass) { cxxbridge :: TrafficClass_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: ManagementInformationBase { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: ManagementInformationBase { cxxbridge :: ManagementInformationBase_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: ManagementInformationBase) { cxxbridge :: ManagementInformationBase_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: CartesianPosition { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: CartesianPosition { cxxbridge :: CartesianPosition_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: CartesianPosition) { cxxbridge :: CartesianPosition_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: GeodeticPosition { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: GeodeticPosition { cxxbridge :: GeodeticPosition_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: GeodeticPosition) { cxxbridge :: GeodeticPosition_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Circle { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Circle { cxxbridge :: Circle_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Circle) { cxxbridge :: Circle_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Rectangle { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Rectangle { cxxbridge :: Rectangle_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Rectangle) { cxxbridge :: Rectangle_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Ellipse { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Ellipse { cxxbridge :: Ellipse_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Ellipse) { cxxbridge :: Ellipse_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: DataRequestWithAddress { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: DataRequestWithAddress { cxxbridge :: DataRequestWithAddress_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: DataRequestWithAddress) { cxxbridge :: DataRequestWithAddress_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: DataRequestWithArea { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: DataRequestWithArea { cxxbridge :: DataRequestWithArea_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: DataRequestWithArea) { cxxbridge :: DataRequestWithArea_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } impl AsRef < root :: vanetza :: geonet :: DataRequestWithAddress > for root :: vanetza :: geonet :: GucDataRequest { fn as_ref (self : & root :: vanetza :: geonet :: GucDataRequest) -> & root :: vanetza :: geonet :: DataRequestWithAddress { cxxbridge :: cast_GucDataRequest_to_DataRequestWithAddress_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: GucDataRequest { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: GucDataRequest { cxxbridge :: GucDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: GucDataRequest) { cxxbridge :: GucDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } impl AsRef < root :: vanetza :: geonet :: DataRequestWithArea > for root :: vanetza :: geonet :: GbcDataRequest { fn as_ref (self : & root :: vanetza :: geonet :: GbcDataRequest) -> & root :: vanetza :: geonet :: DataRequestWithArea { cxxbridge :: cast_GbcDataRequest_to_DataRequestWithArea_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: GbcDataRequest { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: GbcDataRequest { cxxbridge :: GbcDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: GbcDataRequest) { cxxbridge :: GbcDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } impl AsRef < root :: vanetza :: geonet :: DataRequestWithArea > for root :: vanetza :: geonet :: GacDataRequest { fn as_ref (self : & root :: vanetza :: geonet :: GacDataRequest) -> & root :: vanetza :: geonet :: DataRequestWithArea { cxxbridge :: cast_GacDataRequest_to_DataRequestWithArea_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: GacDataRequest { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: GacDataRequest { cxxbridge :: GacDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: GacDataRequest) { cxxbridge :: GacDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: ShbDataRequest { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: ShbDataRequest { cxxbridge :: ShbDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: ShbDataRequest) { cxxbridge :: ShbDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: TsbDataRequest { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: TsbDataRequest { cxxbridge :: TsbDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: TsbDataRequest) { cxxbridge :: TsbDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: Router { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: Router { cxxbridge :: Router_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: Router) { cxxbridge :: Router_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: DataConfirm { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: DataConfirm { cxxbridge :: DataConfirm_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: DataConfirm) { cxxbridge :: DataConfirm_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: TransportInterface { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: TransportInterface { cxxbridge :: TransportInterface_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: TransportInterface) { cxxbridge :: TransportInterface_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: DataIndication { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: DataIndication { cxxbridge :: DataIndication_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: DataIndication) { cxxbridge :: DataIndication_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: ShortPositionVector { unsafe fn copy_new (arg1 : & root :: vanetza :: geonet :: ShortPositionVector , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: ShortPositionVector > >) { cxxbridge :: vanetza_geonet_ShortPositionVector_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , arg1) } } impl Drop for root :: vanetza :: geonet :: Router { fn drop (self : & mut root :: vanetza :: geonet :: Router) { unsafe { cxxbridge :: Router_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: TransportInterface { fn drop (self : & mut root :: vanetza :: geonet :: TransportInterface) { unsafe { cxxbridge :: TransportInterface_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: Address { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: Address > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Address > >) { cxxbridge :: vanetza_geonet_Address_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: Address { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: Address , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Address > >) { cxxbridge :: vanetza_geonet_Address_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: Address { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: Address) { unsafe { cxxbridge :: Address_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: Lifetime { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: Lifetime > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Lifetime > >) { cxxbridge :: vanetza_geonet_Lifetime_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: Lifetime { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: Lifetime , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Lifetime > >) { cxxbridge :: vanetza_geonet_Lifetime_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: Lifetime { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: Lifetime) { unsafe { cxxbridge :: Lifetime_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: TrafficClass { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: TrafficClass > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: TrafficClass > >) { cxxbridge :: vanetza_geonet_TrafficClass_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: TrafficClass { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: TrafficClass , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: TrafficClass > >) { cxxbridge :: vanetza_geonet_TrafficClass_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: TrafficClass { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: TrafficClass) { unsafe { cxxbridge :: TrafficClass_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: CartesianPosition { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: CartesianPosition > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: CartesianPosition > >) { cxxbridge :: vanetza_geonet_CartesianPosition_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: CartesianPosition { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: CartesianPosition , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: CartesianPosition > >) { cxxbridge :: vanetza_geonet_CartesianPosition_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: CartesianPosition { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: CartesianPosition) { unsafe { cxxbridge :: CartesianPosition_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: GeodeticPosition { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: GeodeticPosition > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: GeodeticPosition > >) { cxxbridge :: vanetza_geonet_GeodeticPosition_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: GeodeticPosition { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: GeodeticPosition , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: GeodeticPosition > >) { cxxbridge :: vanetza_geonet_GeodeticPosition_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: GeodeticPosition { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: GeodeticPosition) { unsafe { cxxbridge :: GeodeticPosition_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: Circle { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: Circle > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Circle > >) { cxxbridge :: vanetza_geonet_Circle_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: Circle { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: Circle , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Circle > >) { cxxbridge :: vanetza_geonet_Circle_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: Circle { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: Circle) { unsafe { cxxbridge :: Circle_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: Rectangle { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: Rectangle > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Rectangle > >) { cxxbridge :: vanetza_geonet_Rectangle_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: Rectangle { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: Rectangle , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Rectangle > >) { cxxbridge :: vanetza_geonet_Rectangle_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: Rectangle { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: Rectangle) { unsafe { cxxbridge :: Rectangle_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: Ellipse { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: Ellipse > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Ellipse > >) { cxxbridge :: vanetza_geonet_Ellipse_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: Ellipse { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: Ellipse , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: Ellipse > >) { cxxbridge :: vanetza_geonet_Ellipse_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: Ellipse { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: Ellipse) { unsafe { cxxbridge :: Ellipse_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: DataRequestWithAddress { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: DataRequestWithAddress) { unsafe { cxxbridge :: DataRequestWithAddress_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: GucDataRequest { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: GucDataRequest) { unsafe { cxxbridge :: GucDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: ShbDataRequest { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: ShbDataRequest) { unsafe { cxxbridge :: ShbDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: TsbDataRequest { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: TsbDataRequest) { unsafe { cxxbridge :: TsbDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: LongPositionVector { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: LongPositionVector) { unsafe { cxxbridge :: LongPositionVector_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: ShortPositionVector { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: ShortPositionVector) { unsafe { cxxbridge :: ShortPositionVector_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: ManagementInformationBase { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: ManagementInformationBase) { unsafe { cxxbridge :: ManagementInformationBase_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: DataRequestWithArea { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: DataRequestWithArea) { unsafe { cxxbridge :: DataRequestWithArea_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: GbcDataRequest { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: GbcDataRequest) { unsafe { cxxbridge :: GbcDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: GacDataRequest { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: GacDataRequest) { unsafe { cxxbridge :: GacDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza :: geonet :: DataConfirm { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza :: geonet :: DataConfirm > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: DataConfirm > >) { cxxbridge :: vanetza_geonet_DataConfirm_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza :: geonet :: DataConfirm { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza :: geonet :: DataConfirm , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza :: geonet :: DataConfirm > >) { cxxbridge :: vanetza_geonet_DataConfirm_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza :: geonet :: DataConfirm { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: DataConfirm) { unsafe { cxxbridge :: DataConfirm_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza :: geonet :: DataIndication { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza :: geonet :: DataIndication) { unsafe { cxxbridge :: DataIndication_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: CbfPacketBuffer { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: CbfPacketBuffer { cxxbridge :: CbfPacketBuffer_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: CbfPacketBuffer) { cxxbridge :: CbfPacketBuffer_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza :: geonet :: LocationTable { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza :: geonet :: LocationTable { cxxbridge :: LocationTable_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza :: geonet :: LocationTable) { cxxbridge :: LocationTable_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod security { pub use cxxbridge :: SecurityEntity ; # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: root ; } pub mod vanetza_wrapper { # [repr (C , align (8))] pub struct PacketVariantWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } impl PacketVariantWrapper { # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_PacketVariantWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: PacketVariantWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: PacketVariantWrapper { cxxbridge :: PacketVariantWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: PacketVariantWrapper) { cxxbridge :: PacketVariantWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: PacketVariantWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: PacketVariantWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: PacketVariantWrapper > >) { cxxbridge :: vanetza_wrapper_PacketVariantWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } impl Drop for root :: vanetza_wrapper :: PacketVariantWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: PacketVariantWrapper) { unsafe { cxxbridge :: PacketVariantWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } pub mod btp { # [repr (C , align (8))] pub struct BtpDataIndicationWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 152] } pub use cxxbridge :: BTPIndicationInterfaceWrapper ; pub use cxxbridge :: BTPRequestInterfaceWrapper ; # [repr (C , align (2))] pub struct HeaderB_wrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } impl BtpDataIndicationWrapper { pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_btp_BtpDataIndicationWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this) }) } } pub fn new1 < 'a > (arg1 : & 'a root :: vanetza :: geonet :: DataIndication , arg2 : & 'a root :: vanetza :: btp :: HeaderA) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_btp_BtpDataIndicationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , arg1 , arg2) }) } } pub fn new2 < 'a > (arg1 : & 'a root :: vanetza :: geonet :: DataIndication , arg2 : & 'a root :: vanetza :: btp :: HeaderB) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_btp_BtpDataIndicationWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , arg1 , arg2) }) } } } impl BTPIndicationInterfaceWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument arg2: Found an attempt at using a forward declaration (vanetza::PacketVariant) inside a templated cxx type such as UniquePtr or CxxVector. If the forward declaration is a typedef, perhaps autocxx wasn't sure whether or not it involved a forward declaration. If you're sure it didn't, then you may be able to solve this by using instantiable!."] fn indicate (_uhoh : autocxx :: BindingGenerationFailure) { } } impl BTPRequestInterfaceWrapper { pub fn request (self : :: core :: pin :: Pin < & mut root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper > , arg1 : & root :: vanetza :: btp :: DataRequestB , arg2 : cxx :: UniquePtr < root :: vanetza :: ChunkPacket >) { cxxbridge :: vanetza_wrapper_btp_BTPRequestInterfaceWrapper_request_autocxx_wrapper_0xaf96dc19e4649ed1 (self , arg1 , arg2) } } impl HeaderB_wrapper { pub fn GetHeaderB < 'a > (self : :: core :: pin :: Pin < & 'a mut root :: vanetza_wrapper :: btp :: HeaderB_wrapper >) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: btp :: HeaderB > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: GetHeaderB_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new (destination_port_16t : u16 , destination_port_info_16t : u16) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_btp_HeaderB_wrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , destination_port_16t , destination_port_info_16t) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper { cxxbridge :: BtpDataIndicationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper) { cxxbridge :: BtpDataIndicationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper { cxxbridge :: BTPIndicationInterfaceWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper) { cxxbridge :: BTPIndicationInterfaceWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper { cxxbridge :: BTPRequestInterfaceWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper) { cxxbridge :: BTPRequestInterfaceWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: btp :: HeaderB_wrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: btp :: HeaderB_wrapper { cxxbridge :: HeaderB_wrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: btp :: HeaderB_wrapper) { cxxbridge :: HeaderB_wrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } impl Drop for root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper { fn drop (self : & mut root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper) { unsafe { cxxbridge :: BTPIndicationInterfaceWrapper_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper { fn drop (self : & mut root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper) { unsafe { cxxbridge :: BTPRequestInterfaceWrapper_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: btp :: HeaderB_wrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: btp :: HeaderB_wrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: btp :: HeaderB_wrapper > >) { cxxbridge :: vanetza_wrapper_btp_HeaderB_wrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: btp :: HeaderB_wrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: btp :: HeaderB_wrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: btp :: HeaderB_wrapper > >) { cxxbridge :: vanetza_wrapper_btp_HeaderB_wrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: btp :: HeaderB_wrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: btp :: HeaderB_wrapper) { unsafe { cxxbridge :: HeaderB_wrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper > >) { cxxbridge :: vanetza_wrapper_btp_BtpDataIndicationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper) { unsafe { cxxbridge :: BtpDataIndicationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod convertible { # [repr (C , align (8))] pub struct BTPHeaderAbyte_buffer_implWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct BTPHeaderBbyte_buffer_implWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } impl BTPHeaderAbyte_buffer_implWrapper { pub fn new < 'a > (header : & 'a root :: vanetza :: btp :: HeaderA) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , header) }) } } pub fn convert (self : & root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper , buffer : :: core :: pin :: Pin < & mut cxx :: CxxVector < u8 > >) { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_convert_autocxx_wrapper_0xaf96dc19e4649ed1 (self , buffer) } pub fn size (self : & root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper) -> usize { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_size_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } impl BTPHeaderBbyte_buffer_implWrapper { pub fn new < 'a > (header : & 'a root :: vanetza :: btp :: HeaderB) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , header) }) } } pub fn convert (self : & root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper , buffer : :: core :: pin :: Pin < & mut cxx :: CxxVector < u8 > >) { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_convert_autocxx_wrapper_0xaf96dc19e4649ed1 (self , buffer) } pub fn size (self : & root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper) -> usize { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_size_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper { cxxbridge :: BTPHeaderAbyte_buffer_implWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper) { cxxbridge :: BTPHeaderAbyte_buffer_implWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper { cxxbridge :: BTPHeaderBbyte_buffer_implWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper) { cxxbridge :: BTPHeaderBbyte_buffer_implWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper > >) { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper) { unsafe { cxxbridge :: BTPHeaderAbyte_buffer_implWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper > >) { cxxbridge :: vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper) { unsafe { cxxbridge :: BTPHeaderBbyte_buffer_implWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod geonet { # [repr (C , align (8))] pub struct GeonetAreaWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 48] } # [repr (C , align (8))] pub struct GeodeticPositionWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct CartesianPositionWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct CircleWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct RectangleWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct EllipseWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 16] } # [repr (C , align (8))] pub struct RouterRef { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } pub fn distance < 'a > (lhs : & 'a root :: vanetza :: geonet :: GeodeticPosition , rhs : & 'a root :: vanetza :: geonet :: GeodeticPosition) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: distance_autocxx_wrapper_0xaf96dc19e4649ed1 (lhs , rhs , placement_return_type) }) } } pub fn canonicalize < 'a > (point : & 'a root :: vanetza :: geonet :: CartesianPosition , azimuth : impl autocxx :: ValueParam < root :: vanetza_wrapper :: units :: AngleWrapper > + 'a) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: CartesianPosition > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let mut space0 = autocxx :: ValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (azimuth) ; let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: canonicalize_autocxx_wrapper_0xaf96dc19e4649ed1 (point , space0 . get_ptr () , placement_return_type) }) } } pub fn area_size < 'a > (area : & 'a root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: AreaWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: area_size_autocxx_wrapper_0xaf96dc19e4649ed1 (area , placement_return_type) }) } } impl GeonetAreaWrapper { # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::Area"] fn inner_ref (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::Area"] fn inner_autocxx_wrapper_0xaf96dc19e4649ed1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::Area"] fn vanetza_wrapper_geonet_GeonetAreaWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (_uhoh : autocxx :: BindingGenerationFailure) { } # [doc = "autocxx bindings couldn't be generated: This item depends on some other type(s) which autocxx could not generate, some of them are: vanetza::geonet::Area"] fn vanetza_wrapper_geonet_GeonetAreaWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (_uhoh : autocxx :: BindingGenerationFailure) { } } impl GeodeticPositionWrapper { pub fn latitude < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: GeoAngleWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: latitude_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn longitude < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: GeoAngleWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: longitude_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn inner_ref (self : & root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) -> & root :: vanetza :: geonet :: GeodeticPosition { cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn inner < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: GeodeticPosition > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new < 'a > (src : & 'a root :: vanetza :: geonet :: GeodeticPosition) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , src) }) } } pub fn new1 (src : impl autocxx :: RValueParam < root :: vanetza :: geonet :: GeodeticPosition >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (src) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } pub fn new2 < 'a > (lat : & 'a root :: vanetza_wrapper :: units :: GeoAngleWrapper , lon : & 'a root :: vanetza_wrapper :: units :: GeoAngleWrapper) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , lat , lon) }) } } } impl CartesianPositionWrapper { pub fn x < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: x_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn y < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: y_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn inner_ref (self : & root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) -> & root :: vanetza :: geonet :: CartesianPosition { cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn inner < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: CartesianPosition > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new < 'a > (src : & 'a root :: vanetza :: geonet :: CartesianPosition) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , src) }) } } pub fn new1 (src : impl autocxx :: RValueParam < root :: vanetza :: geonet :: CartesianPosition >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (src) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } pub fn new2 < 'a > (x : & 'a root :: vanetza_wrapper :: units :: LengthWrapper , y : & 'a root :: vanetza_wrapper :: units :: LengthWrapper) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , x , y) }) } } } impl CircleWrapper { pub fn r < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: CircleWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: r_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn inner_ref (self : & root :: vanetza_wrapper :: geonet :: CircleWrapper) -> & root :: vanetza :: geonet :: Circle { cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn inner < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: CircleWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: Circle > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new < 'a > (src : & 'a root :: vanetza :: geonet :: Circle) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , src) }) } } pub fn new1 (src : impl autocxx :: RValueParam < root :: vanetza :: geonet :: Circle >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (src) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } pub fn new2 < 'a > (r : & 'a root :: vanetza_wrapper :: units :: LengthWrapper) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , r) }) } } } impl RectangleWrapper { pub fn a < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: RectangleWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: a_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn b < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: RectangleWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: b_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn inner_ref (self : & root :: vanetza_wrapper :: geonet :: RectangleWrapper) -> & root :: vanetza :: geonet :: Rectangle { cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn inner < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: RectangleWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: Rectangle > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new < 'a > (src : & 'a root :: vanetza :: geonet :: Rectangle) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , src) }) } } pub fn new1 (src : impl autocxx :: RValueParam < root :: vanetza :: geonet :: Rectangle >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (src) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } pub fn new2 < 'a > (a : & 'a root :: vanetza_wrapper :: units :: LengthWrapper , b : & 'a root :: vanetza_wrapper :: units :: LengthWrapper) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , a , b) }) } } } impl EllipseWrapper { pub fn a < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: EllipseWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_a_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn b < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: EllipseWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza_wrapper :: units :: LengthWrapper > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_b_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn inner_ref (self : & root :: vanetza_wrapper :: geonet :: EllipseWrapper) -> & root :: vanetza :: geonet :: Ellipse { cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } pub fn inner < 'a > (self : & 'a root :: vanetza_wrapper :: geonet :: EllipseWrapper) -> impl autocxx :: moveit :: new :: New < Output = root :: vanetza :: geonet :: Ellipse > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | placement_return_type | { let placement_return_type = placement_return_type . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (self , placement_return_type) }) } } pub fn new < 'a > (src : & 'a root :: vanetza :: geonet :: Ellipse) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , src) }) } } pub fn new1 (src : impl autocxx :: RValueParam < root :: vanetza :: geonet :: Ellipse >) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let mut space0 = autocxx :: RValueParamHandler :: default () ; let mut space0 = :: core :: pin :: Pin :: new_unchecked (& mut space0) ; space0 . as_mut () . populate (src) ; let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , space0 . get_ptr ()) }) } } pub fn new2 < 'a > (a : & 'a root :: vanetza_wrapper :: units :: LengthWrapper , b : & 'a root :: vanetza_wrapper :: units :: LengthWrapper) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (this , a , b) }) } } } impl RouterRef { pub fn indicate (self : :: core :: pin :: Pin < & mut root :: vanetza_wrapper :: geonet :: RouterRef > , packet : cxx :: UniquePtr < root :: vanetza_wrapper :: PacketVariantWrapper > , sender : & root :: vanetza :: MacAddress , destination : & root :: vanetza :: MacAddress) { cxxbridge :: vanetza_wrapper_geonet_RouterRef_indicate_autocxx_wrapper_0xaf96dc19e4649ed1 (self , packet , sender , destination) } pub fn new < 'a > (ref_ : :: core :: pin :: Pin < & 'a mut root :: vanetza :: geonet :: Router >) -> impl autocxx :: moveit :: new :: New < Output = Self > + 'a { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_geonet_RouterRef_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (this , ref_) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper { cxxbridge :: GeonetAreaWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper) { cxxbridge :: GeonetAreaWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { cxxbridge :: GeodeticPositionWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) { cxxbridge :: GeodeticPositionWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { cxxbridge :: CartesianPositionWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) { cxxbridge :: CartesianPositionWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: CircleWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: CircleWrapper { cxxbridge :: CircleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: CircleWrapper) { cxxbridge :: CircleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: RectangleWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: RectangleWrapper { cxxbridge :: RectangleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: RectangleWrapper) { cxxbridge :: RectangleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: EllipseWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: EllipseWrapper { cxxbridge :: EllipseWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: EllipseWrapper) { cxxbridge :: EllipseWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: geonet :: RouterRef { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: geonet :: RouterRef { cxxbridge :: RouterRef_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: geonet :: RouterRef) { cxxbridge :: RouterRef_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_GeodeticPositionWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper) { unsafe { cxxbridge :: GeodeticPositionWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_CartesianPositionWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper) { unsafe { cxxbridge :: CartesianPositionWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: CircleWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: CircleWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: CircleWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: CircleWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: CircleWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: CircleWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_CircleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: CircleWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: CircleWrapper) { unsafe { cxxbridge :: CircleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: RectangleWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: RectangleWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: RectangleWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: RectangleWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: RectangleWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: RectangleWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_RectangleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: RectangleWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: RectangleWrapper) { unsafe { cxxbridge :: RectangleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: EllipseWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: EllipseWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: EllipseWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: EllipseWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: EllipseWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: EllipseWrapper > >) { cxxbridge :: vanetza_wrapper_geonet_EllipseWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: EllipseWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: EllipseWrapper) { unsafe { cxxbridge :: EllipseWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: geonet :: RouterRef { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: geonet :: RouterRef > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: RouterRef > >) { cxxbridge :: vanetza_wrapper_geonet_RouterRef_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: geonet :: RouterRef { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: geonet :: RouterRef , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: geonet :: RouterRef > >) { cxxbridge :: vanetza_wrapper_geonet_RouterRef_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: geonet :: RouterRef { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: RouterRef) { unsafe { cxxbridge :: RouterRef_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } impl Drop for root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper) { unsafe { cxxbridge :: GeonetAreaWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } pub mod units { # [repr (C , align (8))] pub struct AccelerationWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct AngleWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct GeoAngleWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct TrueNorthWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct AngularVelocityWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct AreaWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct CurvatureWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct FrequencyWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct LengthWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct DurationWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct VelocityWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } # [repr (C , align (8))] pub struct NauticalVelocityWrapper { _pinned : core :: marker :: PhantomData < core :: marker :: PhantomPinned > , _non_send_sync : core :: marker :: PhantomData < [* const u8 ; 0] > , _data : [u8 ; 8] } impl AccelerationWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Acceleration)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (meters_per_second_squared : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_AccelerationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , meters_per_second_squared) }) } } } impl AngleWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Angle)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (radians : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_AngleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , radians) }) } } } impl GeoAngleWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::GeoAngle)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (degrees : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_GeoAngleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , degrees) }) } } } impl TrueNorthWrapper { pub fn as_degrees (self : & root :: vanetza_wrapper :: units :: TrueNorthWrapper) -> f64 { cxxbridge :: vanetza_wrapper_units_TrueNorthWrapper_as_degrees_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::TrueNorth)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (degrees : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_TrueNorthWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , degrees) }) } } } impl AngularVelocityWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::AngularVelocity)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (radians_per_second : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_AngularVelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , radians_per_second) }) } } } impl AreaWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Area)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (square_meters : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_AreaWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , square_meters) }) } } } impl CurvatureWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Curvature)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (reciprocal_metre_value : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_CurvatureWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , reciprocal_metre_value) }) } } } impl FrequencyWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Frequency)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (hertz : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_FrequencyWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , hertz) }) } } } impl LengthWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Length)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (meters : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_LengthWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , meters) }) } } } impl DurationWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Duration)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (seconds : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_DurationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , seconds) }) } } } impl VelocityWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::Velocity)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (meter_per_second : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_VelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , meter_per_second) }) } } } impl NauticalVelocityWrapper { # [doc = "autocxx bindings couldn't be generated: Problem handling function argument src: Found an attempt at using a type marked as blocked! (vanetza::units::NauticalVelocity)"] fn new (_uhoh : autocxx :: BindingGenerationFailure) { } pub fn new1 (knot : f64) -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: vanetza_wrapper_units_NauticalVelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (this , knot) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: AccelerationWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: AccelerationWrapper { cxxbridge :: AccelerationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: AccelerationWrapper) { cxxbridge :: AccelerationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: AngleWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: AngleWrapper { cxxbridge :: AngleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: AngleWrapper) { cxxbridge :: AngleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: GeoAngleWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: GeoAngleWrapper { cxxbridge :: GeoAngleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: GeoAngleWrapper) { cxxbridge :: GeoAngleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: TrueNorthWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: TrueNorthWrapper { cxxbridge :: TrueNorthWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: TrueNorthWrapper) { cxxbridge :: TrueNorthWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: AngularVelocityWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: AngularVelocityWrapper { cxxbridge :: AngularVelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: AngularVelocityWrapper) { cxxbridge :: AngularVelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: AreaWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: AreaWrapper { cxxbridge :: AreaWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: AreaWrapper) { cxxbridge :: AreaWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: CurvatureWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: CurvatureWrapper { cxxbridge :: CurvatureWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: CurvatureWrapper) { cxxbridge :: CurvatureWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: FrequencyWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: FrequencyWrapper { cxxbridge :: FrequencyWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: FrequencyWrapper) { cxxbridge :: FrequencyWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: LengthWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: LengthWrapper { cxxbridge :: LengthWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: LengthWrapper) { cxxbridge :: LengthWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: DurationWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: DurationWrapper { cxxbridge :: DurationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: DurationWrapper) { cxxbridge :: DurationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: VelocityWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: VelocityWrapper { cxxbridge :: VelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: VelocityWrapper) { cxxbridge :: VelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { unsafe fn allocate_uninitialized_cpp_storage () -> * mut root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { cxxbridge :: NauticalVelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut root :: vanetza_wrapper :: units :: NauticalVelocityWrapper) { cxxbridge :: NauticalVelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: AccelerationWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: AccelerationWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AccelerationWrapper > >) { cxxbridge :: vanetza_wrapper_units_AccelerationWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: AccelerationWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: AccelerationWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AccelerationWrapper > >) { cxxbridge :: vanetza_wrapper_units_AccelerationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: AccelerationWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: AccelerationWrapper) { unsafe { cxxbridge :: AccelerationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: AngleWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: AngleWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AngleWrapper > >) { cxxbridge :: vanetza_wrapper_units_AngleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: AngleWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: AngleWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AngleWrapper > >) { cxxbridge :: vanetza_wrapper_units_AngleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: AngleWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: AngleWrapper) { unsafe { cxxbridge :: AngleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: GeoAngleWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: GeoAngleWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: GeoAngleWrapper > >) { cxxbridge :: vanetza_wrapper_units_GeoAngleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: GeoAngleWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: GeoAngleWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: GeoAngleWrapper > >) { cxxbridge :: vanetza_wrapper_units_GeoAngleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: GeoAngleWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: GeoAngleWrapper) { unsafe { cxxbridge :: GeoAngleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: TrueNorthWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: TrueNorthWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: TrueNorthWrapper > >) { cxxbridge :: vanetza_wrapper_units_TrueNorthWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: TrueNorthWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: TrueNorthWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: TrueNorthWrapper > >) { cxxbridge :: vanetza_wrapper_units_TrueNorthWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: TrueNorthWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: TrueNorthWrapper) { unsafe { cxxbridge :: TrueNorthWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: AngularVelocityWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: AngularVelocityWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AngularVelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_AngularVelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: AngularVelocityWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: AngularVelocityWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AngularVelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_AngularVelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: AngularVelocityWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: AngularVelocityWrapper) { unsafe { cxxbridge :: AngularVelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: AreaWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: AreaWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AreaWrapper > >) { cxxbridge :: vanetza_wrapper_units_AreaWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: AreaWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: AreaWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: AreaWrapper > >) { cxxbridge :: vanetza_wrapper_units_AreaWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: AreaWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: AreaWrapper) { unsafe { cxxbridge :: AreaWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: CurvatureWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: CurvatureWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: CurvatureWrapper > >) { cxxbridge :: vanetza_wrapper_units_CurvatureWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: CurvatureWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: CurvatureWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: CurvatureWrapper > >) { cxxbridge :: vanetza_wrapper_units_CurvatureWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: CurvatureWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: CurvatureWrapper) { unsafe { cxxbridge :: CurvatureWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: FrequencyWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: FrequencyWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: FrequencyWrapper > >) { cxxbridge :: vanetza_wrapper_units_FrequencyWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: FrequencyWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: FrequencyWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: FrequencyWrapper > >) { cxxbridge :: vanetza_wrapper_units_FrequencyWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: FrequencyWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: FrequencyWrapper) { unsafe { cxxbridge :: FrequencyWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: LengthWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: LengthWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: LengthWrapper > >) { cxxbridge :: vanetza_wrapper_units_LengthWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: LengthWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: LengthWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: LengthWrapper > >) { cxxbridge :: vanetza_wrapper_units_LengthWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: LengthWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: LengthWrapper) { unsafe { cxxbridge :: LengthWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: DurationWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: DurationWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: DurationWrapper > >) { cxxbridge :: vanetza_wrapper_units_DurationWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: DurationWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: DurationWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: DurationWrapper > >) { cxxbridge :: vanetza_wrapper_units_DurationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: DurationWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: DurationWrapper) { unsafe { cxxbridge :: DurationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: VelocityWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: VelocityWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: VelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_VelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: VelocityWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: VelocityWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: VelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_VelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: VelocityWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: VelocityWrapper) { unsafe { cxxbridge :: VelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , root :: vanetza_wrapper :: units :: NauticalVelocityWrapper > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: NauticalVelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_NauticalVelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & root :: vanetza_wrapper :: units :: NauticalVelocityWrapper , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < root :: vanetza_wrapper :: units :: NauticalVelocityWrapper > >) { cxxbridge :: vanetza_wrapper_units_NauticalVelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for root :: vanetza_wrapper :: units :: NauticalVelocityWrapper { # [doc = "Synthesized destructor."] fn drop (self : & mut root :: vanetza_wrapper :: units :: NauticalVelocityWrapper) { unsafe { cxxbridge :: NauticalVelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (self) } } } # [allow (unused_imports)] use self :: super :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: super :: root ; } # [allow (unused_imports)] use self :: super :: super :: { cxxbridge , ToCppString } ; # [allow (unused_imports)] use self :: super :: root ; } } # [cxx :: bridge] mod cxxbridge { impl UniquePtr < PositionFix > { } impl SharedPtr < PositionFix > { } impl WeakPtr < PositionFix > { } impl UniquePtr < MacAddress > { } impl SharedPtr < MacAddress > { } impl WeakPtr < MacAddress > { } impl CxxVector < MacAddress > { } impl UniquePtr < ChunkPacket > { } impl SharedPtr < ChunkPacket > { } impl WeakPtr < ChunkPacket > { } impl CxxVector < ChunkPacket > { } impl UniquePtr < CohesivePacket > { } impl SharedPtr < CohesivePacket > { } impl WeakPtr < CohesivePacket > { } impl CxxVector < CohesivePacket > { } impl UniquePtr < StationType > { } impl SharedPtr < StationType > { } impl WeakPtr < StationType > { } impl CxxVector < StationType > { } impl UniquePtr < Address > { } impl SharedPtr < Address > { } impl WeakPtr < Address > { } impl CxxVector < Address > { } impl UniquePtr < LongPositionVector > { } impl SharedPtr < LongPositionVector > { } impl WeakPtr < LongPositionVector > { } impl UniquePtr < ShortPositionVector > { } impl SharedPtr < ShortPositionVector > { } impl WeakPtr < ShortPositionVector > { } impl UniquePtr < Lifetime > { } impl SharedPtr < Lifetime > { } impl WeakPtr < Lifetime > { } impl CxxVector < Lifetime > { } impl UniquePtr < TrafficClass > { } impl SharedPtr < TrafficClass > { } impl WeakPtr < TrafficClass > { } impl CxxVector < TrafficClass > { } impl UniquePtr < UnicastForwarding > { } impl SharedPtr < UnicastForwarding > { } impl WeakPtr < UnicastForwarding > { } impl CxxVector < UnicastForwarding > { } impl UniquePtr < BroadcastForwarding > { } impl SharedPtr < BroadcastForwarding > { } impl WeakPtr < BroadcastForwarding > { } impl CxxVector < BroadcastForwarding > { } impl UniquePtr < AddrConfMethod > { } impl SharedPtr < AddrConfMethod > { } impl WeakPtr < AddrConfMethod > { } impl CxxVector < AddrConfMethod > { } impl UniquePtr < InterfaceType > { } impl SharedPtr < InterfaceType > { } impl WeakPtr < InterfaceType > { } impl CxxVector < InterfaceType > { } impl UniquePtr < SecurityDecapHandling > { } impl SharedPtr < SecurityDecapHandling > { } impl WeakPtr < SecurityDecapHandling > { } impl CxxVector < SecurityDecapHandling > { } impl UniquePtr < ManagementInformationBase > { } impl SharedPtr < ManagementInformationBase > { } impl WeakPtr < ManagementInformationBase > { } impl UniquePtr < CartesianPosition > { } impl SharedPtr < CartesianPosition > { } impl WeakPtr < CartesianPosition > { } impl CxxVector < CartesianPosition > { } impl UniquePtr < GeodeticPosition > { } impl SharedPtr < GeodeticPosition > { } impl WeakPtr < GeodeticPosition > { } impl CxxVector < GeodeticPosition > { } impl UniquePtr < Circle > { } impl SharedPtr < Circle > { } impl WeakPtr < Circle > { } impl CxxVector < Circle > { } impl UniquePtr < Rectangle > { } impl SharedPtr < Rectangle > { } impl WeakPtr < Rectangle > { } impl CxxVector < Rectangle > { } impl UniquePtr < Ellipse > { } impl SharedPtr < Ellipse > { } impl WeakPtr < Ellipse > { } impl CxxVector < Ellipse > { } impl UniquePtr < UpperProtocol > { } impl SharedPtr < UpperProtocol > { } impl WeakPtr < UpperProtocol > { } impl CxxVector < UpperProtocol > { } impl UniquePtr < TransportType > { } impl SharedPtr < TransportType > { } impl WeakPtr < TransportType > { } impl CxxVector < TransportType > { } impl UniquePtr < DataRequestWithAddress > { } impl SharedPtr < DataRequestWithAddress > { } impl WeakPtr < DataRequestWithAddress > { } impl UniquePtr < DataRequestWithArea > { } impl SharedPtr < DataRequestWithArea > { } impl WeakPtr < DataRequestWithArea > { } impl UniquePtr < GucDataRequest > { } impl SharedPtr < GucDataRequest > { } impl WeakPtr < GucDataRequest > { } impl UniquePtr < GbcDataRequest > { } impl SharedPtr < GbcDataRequest > { } impl WeakPtr < GbcDataRequest > { } impl UniquePtr < GacDataRequest > { } impl SharedPtr < GacDataRequest > { } impl WeakPtr < GacDataRequest > { } impl UniquePtr < ShbDataRequest > { } impl SharedPtr < ShbDataRequest > { } impl WeakPtr < ShbDataRequest > { } impl UniquePtr < TsbDataRequest > { } impl SharedPtr < TsbDataRequest > { } impl WeakPtr < TsbDataRequest > { } impl UniquePtr < Router > { } impl SharedPtr < Router > { } impl WeakPtr < Router > { } impl UniquePtr < DataConfirm > { } impl SharedPtr < DataConfirm > { } impl WeakPtr < DataConfirm > { } impl CxxVector < DataConfirm > { } impl UniquePtr < DataConfirm_ResultCode > { } impl SharedPtr < DataConfirm_ResultCode > { } impl WeakPtr < DataConfirm_ResultCode > { } impl CxxVector < DataConfirm_ResultCode > { } impl UniquePtr < TransportInterface > { } impl SharedPtr < TransportInterface > { } impl WeakPtr < TransportInterface > { } impl UniquePtr < DataIndication > { } impl SharedPtr < DataIndication > { } impl WeakPtr < DataIndication > { } impl UniquePtr < HeaderA > { } impl SharedPtr < HeaderA > { } impl WeakPtr < HeaderA > { } impl CxxVector < HeaderA > { } impl UniquePtr < HeaderB > { } impl SharedPtr < HeaderB > { } impl WeakPtr < HeaderB > { } impl CxxVector < HeaderB > { } impl UniquePtr < DataRequestGeoNetParams > { } impl SharedPtr < DataRequestGeoNetParams > { } impl WeakPtr < DataRequestGeoNetParams > { } impl UniquePtr < DataRequestA > { } impl SharedPtr < DataRequestA > { } impl WeakPtr < DataRequestA > { } impl UniquePtr < DataRequestB > { } impl SharedPtr < DataRequestB > { } impl WeakPtr < DataRequestB > { } impl UniquePtr < PacketVariantWrapper > { } impl SharedPtr < PacketVariantWrapper > { } impl WeakPtr < PacketVariantWrapper > { } impl CxxVector < PacketVariantWrapper > { } impl UniquePtr < AccelerationWrapper > { } impl SharedPtr < AccelerationWrapper > { } impl WeakPtr < AccelerationWrapper > { } impl CxxVector < AccelerationWrapper > { } impl UniquePtr < AngleWrapper > { } impl SharedPtr < AngleWrapper > { } impl WeakPtr < AngleWrapper > { } impl CxxVector < AngleWrapper > { } impl UniquePtr < GeoAngleWrapper > { } impl SharedPtr < GeoAngleWrapper > { } impl WeakPtr < GeoAngleWrapper > { } impl CxxVector < GeoAngleWrapper > { } impl UniquePtr < TrueNorthWrapper > { } impl SharedPtr < TrueNorthWrapper > { } impl WeakPtr < TrueNorthWrapper > { } impl CxxVector < TrueNorthWrapper > { } impl UniquePtr < AngularVelocityWrapper > { } impl SharedPtr < AngularVelocityWrapper > { } impl WeakPtr < AngularVelocityWrapper > { } impl CxxVector < AngularVelocityWrapper > { } impl UniquePtr < AreaWrapper > { } impl SharedPtr < AreaWrapper > { } impl WeakPtr < AreaWrapper > { } impl CxxVector < AreaWrapper > { } impl UniquePtr < CurvatureWrapper > { } impl SharedPtr < CurvatureWrapper > { } impl WeakPtr < CurvatureWrapper > { } impl CxxVector < CurvatureWrapper > { } impl UniquePtr < FrequencyWrapper > { } impl SharedPtr < FrequencyWrapper > { } impl WeakPtr < FrequencyWrapper > { } impl CxxVector < FrequencyWrapper > { } impl UniquePtr < LengthWrapper > { } impl SharedPtr < LengthWrapper > { } impl WeakPtr < LengthWrapper > { } impl CxxVector < LengthWrapper > { } impl UniquePtr < DurationWrapper > { } impl SharedPtr < DurationWrapper > { } impl WeakPtr < DurationWrapper > { } impl CxxVector < DurationWrapper > { } impl UniquePtr < VelocityWrapper > { } impl SharedPtr < VelocityWrapper > { } impl WeakPtr < VelocityWrapper > { } impl CxxVector < VelocityWrapper > { } impl UniquePtr < NauticalVelocityWrapper > { } impl SharedPtr < NauticalVelocityWrapper > { } impl WeakPtr < NauticalVelocityWrapper > { } impl CxxVector < NauticalVelocityWrapper > { } impl UniquePtr < GeonetAreaWrapper > { } impl SharedPtr < GeonetAreaWrapper > { } impl WeakPtr < GeonetAreaWrapper > { } impl UniquePtr < GeodeticPositionWrapper > { } impl SharedPtr < GeodeticPositionWrapper > { } impl WeakPtr < GeodeticPositionWrapper > { } impl CxxVector < GeodeticPositionWrapper > { } impl UniquePtr < CartesianPositionWrapper > { } impl SharedPtr < CartesianPositionWrapper > { } impl WeakPtr < CartesianPositionWrapper > { } impl CxxVector < CartesianPositionWrapper > { } impl UniquePtr < CircleWrapper > { } impl SharedPtr < CircleWrapper > { } impl WeakPtr < CircleWrapper > { } impl CxxVector < CircleWrapper > { } impl UniquePtr < RectangleWrapper > { } impl SharedPtr < RectangleWrapper > { } impl WeakPtr < RectangleWrapper > { } impl CxxVector < RectangleWrapper > { } impl UniquePtr < EllipseWrapper > { } impl SharedPtr < EllipseWrapper > { } impl WeakPtr < EllipseWrapper > { } impl CxxVector < EllipseWrapper > { } impl UniquePtr < RouterRef > { } impl SharedPtr < RouterRef > { } impl WeakPtr < RouterRef > { } impl CxxVector < RouterRef > { } impl UniquePtr < BtpDataIndicationWrapper > { } impl SharedPtr < BtpDataIndicationWrapper > { } impl WeakPtr < BtpDataIndicationWrapper > { } impl UniquePtr < BTPIndicationInterfaceWrapper > { } impl SharedPtr < BTPIndicationInterfaceWrapper > { } impl WeakPtr < BTPIndicationInterfaceWrapper > { } impl UniquePtr < BTPRequestInterfaceWrapper > { } impl SharedPtr < BTPRequestInterfaceWrapper > { } impl WeakPtr < BTPRequestInterfaceWrapper > { } impl UniquePtr < HeaderB_wrapper > { } impl SharedPtr < HeaderB_wrapper > { } impl WeakPtr < HeaderB_wrapper > { } impl CxxVector < HeaderB_wrapper > { } impl UniquePtr < BTPHeaderAbyte_buffer_implWrapper > { } impl SharedPtr < BTPHeaderAbyte_buffer_implWrapper > { } impl WeakPtr < BTPHeaderAbyte_buffer_implWrapper > { } impl UniquePtr < BTPHeaderBbyte_buffer_implWrapper > { } impl SharedPtr < BTPHeaderBbyte_buffer_implWrapper > { } impl WeakPtr < BTPHeaderBbyte_buffer_implWrapper > { } impl UniquePtr < SecurityEntity > { } impl SharedPtr < SecurityEntity > { } impl WeakPtr < SecurityEntity > { } impl UniquePtr < RequestInterface > { } impl SharedPtr < RequestInterface > { } impl WeakPtr < RequestInterface > { } impl UniquePtr < CbfPacketBuffer > { } impl SharedPtr < CbfPacketBuffer > { } impl WeakPtr < CbfPacketBuffer > { } impl UniquePtr < LocationTable > { } impl SharedPtr < LocationTable > { } impl WeakPtr < LocationTable > { } impl UniquePtr < Runtime > { } impl SharedPtr < Runtime > { } impl WeakPtr < Runtime > { } impl UniquePtr < OutputArchive > { } impl SharedPtr < OutputArchive > { } impl WeakPtr < OutputArchive > { } impl CxxVector < OutputArchive > { } impl UniquePtr < InputArchive > { } impl SharedPtr < InputArchive > { } impl WeakPtr < InputArchive > { } impl CxxVector < InputArchive > { } impl UniquePtr < std_initializer_list_uint8_t_AutocxxConcrete > { } impl SharedPtr < std_initializer_list_uint8_t_AutocxxConcrete > { } impl WeakPtr < std_initializer_list_uint8_t_AutocxxConcrete > { } impl UniquePtr < OsiLayer > { } impl SharedPtr < OsiLayer > { } impl WeakPtr < OsiLayer > { } impl CxxVector < OsiLayer > { } impl UniquePtr < ByteBufferConvertible > { } impl SharedPtr < ByteBufferConvertible > { } impl WeakPtr < ByteBufferConvertible > { } impl CxxVector < ByteBufferConvertible > { } unsafe extern "C++" { fn autocxx_make_string_0xaf96dc19e4649ed1 (str_ : & str) -> UniquePtr < CxxString > ; pub unsafe fn PositionFix_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut PositionFix ; pub unsafe fn PositionFix_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut PositionFix) ; # [namespace = "vanetza"] type PositionFix = super :: bindgen :: root :: vanetza :: PositionFix ; pub unsafe fn MacAddress_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut MacAddress ; pub unsafe fn MacAddress_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut MacAddress) ; # [namespace = "vanetza"] type MacAddress = super :: bindgen :: root :: vanetza :: MacAddress ; pub unsafe fn ChunkPacket_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut ChunkPacket ; pub unsafe fn ChunkPacket_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut ChunkPacket) ; # [namespace = "vanetza"] # [doc = " \\brief ChunckPacket is a packet consisting of several memory chunks\n\n ChunkPacket is the preferred packet type when it is getting assembled step by step.\n Each layer can easily add further bytes without caring about other layers at all."] type ChunkPacket = super :: bindgen :: root :: vanetza :: ChunkPacket ; pub unsafe fn CohesivePacket_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CohesivePacket ; pub unsafe fn CohesivePacket_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CohesivePacket) ; # [namespace = "vanetza"] # [doc = " A cohesive packet is stored in contiguous memory"] type CohesivePacket = super :: bindgen :: root :: vanetza :: CohesivePacket ; # [namespace = "vanetza"] type PacketVariant ; # [namespace = "vanetza::geonet"] type StationType = super :: bindgen :: root :: vanetza :: geonet :: StationType ; pub unsafe fn Address_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Address ; pub unsafe fn Address_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Address) ; # [namespace = "vanetza::geonet"] type Address = super :: bindgen :: root :: vanetza :: geonet :: Address ; pub unsafe fn LongPositionVector_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut LongPositionVector ; pub unsafe fn LongPositionVector_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut LongPositionVector) ; # [namespace = "vanetza::geonet"] type LongPositionVector = super :: bindgen :: root :: vanetza :: geonet :: LongPositionVector ; pub unsafe fn ShortPositionVector_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut ShortPositionVector ; pub unsafe fn ShortPositionVector_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut ShortPositionVector) ; # [namespace = "vanetza::geonet"] type ShortPositionVector = super :: bindgen :: root :: vanetza :: geonet :: ShortPositionVector ; pub unsafe fn Lifetime_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Lifetime ; pub unsafe fn Lifetime_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Lifetime) ; # [namespace = "vanetza::geonet"] type Lifetime = super :: bindgen :: root :: vanetza :: geonet :: Lifetime ; pub unsafe fn TrafficClass_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut TrafficClass ; pub unsafe fn TrafficClass_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut TrafficClass) ; # [namespace = "vanetza::geonet"] type TrafficClass = super :: bindgen :: root :: vanetza :: geonet :: TrafficClass ; # [namespace = "vanetza::geonet"] type UnicastForwarding = super :: bindgen :: root :: vanetza :: geonet :: UnicastForwarding ; # [namespace = "vanetza::geonet"] type BroadcastForwarding = super :: bindgen :: root :: vanetza :: geonet :: BroadcastForwarding ; # [namespace = "vanetza::geonet"] type AddrConfMethod = super :: bindgen :: root :: vanetza :: geonet :: AddrConfMethod ; # [namespace = "vanetza::geonet"] type InterfaceType = super :: bindgen :: root :: vanetza :: geonet :: InterfaceType ; # [namespace = "vanetza::geonet"] type SecurityDecapHandling = super :: bindgen :: root :: vanetza :: geonet :: SecurityDecapHandling ; pub unsafe fn ManagementInformationBase_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut ManagementInformationBase ; pub unsafe fn ManagementInformationBase_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut ManagementInformationBase) ; # [namespace = "vanetza::geonet"] # [doc = " The Management Information Base (MIB) defines the GeoNetworking protocol constants.\n\n \\see EN 302 636-4-1 v1.3.1 Annex H"] type ManagementInformationBase = super :: bindgen :: root :: vanetza :: geonet :: ManagementInformationBase ; pub unsafe fn CartesianPosition_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CartesianPosition ; pub unsafe fn CartesianPosition_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CartesianPosition) ; # [namespace = "vanetza::geonet"] # [doc = " Cartesian position.\n As it is not strictly specified in any GeoNet standard document,\n I define it as point in an ENU coordinate system and its units as meters."] type CartesianPosition = super :: bindgen :: root :: vanetza :: geonet :: CartesianPosition ; pub unsafe fn GeodeticPosition_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GeodeticPosition ; pub unsafe fn GeodeticPosition_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GeodeticPosition) ; # [namespace = "vanetza::geonet"] type GeodeticPosition = super :: bindgen :: root :: vanetza :: geonet :: GeodeticPosition ; pub unsafe fn Circle_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Circle ; pub unsafe fn Circle_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Circle) ; # [namespace = "vanetza::geonet"] type Circle = super :: bindgen :: root :: vanetza :: geonet :: Circle ; pub unsafe fn Rectangle_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Rectangle ; pub unsafe fn Rectangle_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Rectangle) ; # [namespace = "vanetza::geonet"] type Rectangle = super :: bindgen :: root :: vanetza :: geonet :: Rectangle ; pub unsafe fn Ellipse_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Ellipse ; pub unsafe fn Ellipse_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Ellipse) ; # [namespace = "vanetza::geonet"] type Ellipse = super :: bindgen :: root :: vanetza :: geonet :: Ellipse ; # [namespace = "vanetza::geonet"] type UpperProtocol = super :: bindgen :: root :: vanetza :: geonet :: UpperProtocol ; # [namespace = "vanetza::geonet"] type TransportType = super :: bindgen :: root :: vanetza :: geonet :: TransportType ; pub unsafe fn DataRequestWithAddress_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataRequestWithAddress ; pub unsafe fn DataRequestWithAddress_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataRequestWithAddress) ; # [namespace = "vanetza::geonet"] type DataRequestWithAddress = super :: bindgen :: root :: vanetza :: geonet :: DataRequestWithAddress ; pub unsafe fn DataRequestWithArea_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataRequestWithArea ; pub unsafe fn DataRequestWithArea_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataRequestWithArea) ; # [namespace = "vanetza::geonet"] type DataRequestWithArea = super :: bindgen :: root :: vanetza :: geonet :: DataRequestWithArea ; pub fn cast_GucDataRequest_to_DataRequestWithAddress_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GucDataRequest) -> & DataRequestWithAddress ; pub unsafe fn GucDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GucDataRequest ; pub unsafe fn GucDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GucDataRequest) ; # [namespace = "vanetza::geonet"] type GucDataRequest = super :: bindgen :: root :: vanetza :: geonet :: GucDataRequest ; pub fn cast_GbcDataRequest_to_DataRequestWithArea_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GbcDataRequest) -> & DataRequestWithArea ; pub unsafe fn GbcDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GbcDataRequest ; pub unsafe fn GbcDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GbcDataRequest) ; # [namespace = "vanetza::geonet"] type GbcDataRequest = super :: bindgen :: root :: vanetza :: geonet :: GbcDataRequest ; pub fn cast_GacDataRequest_to_DataRequestWithArea_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GacDataRequest) -> & DataRequestWithArea ; pub unsafe fn GacDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GacDataRequest ; pub unsafe fn GacDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GacDataRequest) ; # [namespace = "vanetza::geonet"] type GacDataRequest = super :: bindgen :: root :: vanetza :: geonet :: GacDataRequest ; pub unsafe fn ShbDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut ShbDataRequest ; pub unsafe fn ShbDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut ShbDataRequest) ; # [namespace = "vanetza::geonet"] type ShbDataRequest = super :: bindgen :: root :: vanetza :: geonet :: ShbDataRequest ; pub unsafe fn TsbDataRequest_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut TsbDataRequest ; pub unsafe fn TsbDataRequest_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut TsbDataRequest) ; # [namespace = "vanetza::geonet"] type TsbDataRequest = super :: bindgen :: root :: vanetza :: geonet :: TsbDataRequest ; pub unsafe fn Router_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut Router ; pub unsafe fn Router_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut Router) ; # [namespace = "vanetza::geonet"] # [doc = " Router is the central entity for GeoNet communication\n\n Incoming and outgoing GeoNet packets are handled by the router.\n It may even dispatch own packets (beacons) if necessary.\n\n This implementation follows EN 302 636-4-1 v1.3.1"] type Router = super :: bindgen :: root :: vanetza :: geonet :: Router ; pub unsafe fn DataConfirm_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataConfirm ; pub unsafe fn DataConfirm_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataConfirm) ; # [namespace = "vanetza::geonet"] type DataConfirm = super :: bindgen :: root :: vanetza :: geonet :: DataConfirm ; # [namespace = "vanetza::geonet::DataConfirm"] # [cxx_name = "ResultCode"] type DataConfirm_ResultCode = super :: bindgen :: root :: vanetza :: geonet :: DataConfirm_ResultCode ; pub unsafe fn TransportInterface_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut TransportInterface ; pub unsafe fn TransportInterface_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut TransportInterface) ; # [namespace = "vanetza::geonet"] type TransportInterface ; pub unsafe fn DataIndication_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataIndication ; pub unsafe fn DataIndication_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataIndication) ; # [namespace = "vanetza::geonet"] type DataIndication = super :: bindgen :: root :: vanetza :: geonet :: DataIndication ; # [namespace = "vanetza::geonet"] pub fn is_manually_configured (self : & Address) -> bool ; # [namespace = "vanetza::geonet"] # [cxx_name = "is_manually_configured"] pub fn is_manually_configured1 (self : Pin < & mut Address > , flag : bool) ; # [namespace = "vanetza::geonet"] pub fn station_type (self : & Address) -> StationType ; # [namespace = "vanetza::geonet"] # [cxx_name = "station_type"] pub fn station_type1 (self : Pin < & mut Address > , type_ : StationType) ; # [namespace = "vanetza::geonet"] pub fn mid (self : & Address) -> & MacAddress ; # [namespace = "vanetza::geonet"] # [cxx_name = "mid"] pub fn mid1 (self : Pin < & mut Address > , mid : & MacAddress) ; pub unsafe fn vanetza_geonet_Address_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Address) ; pub unsafe fn vanetza_geonet_Address_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Address , arg1 : & MacAddress) ; pub unsafe fn vanetza_geonet_LongPositionVector_position_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & LongPositionVector , placement_return_type : * mut GeodeticPosition) ; pub unsafe fn vanetza_geonet_LongPositionVector_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LongPositionVector) ; pub unsafe fn vanetza_geonet_ShortPositionVector_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ShortPositionVector) ; pub unsafe fn vanetza_geonet_ShortPositionVector_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ShortPositionVector , arg1 : & ShortPositionVector) ; pub unsafe fn vanetza_geonet_ShortPositionVector_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ShortPositionVector , arg1 : & LongPositionVector) ; pub fn zero_autocxx_wrapper_0xaf96dc19e4649ed1 () -> Lifetime ; pub fn vanetza_geonet_Lifetime_raw_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & Lifetime) -> u8 ; # [namespace = "vanetza::geonet"] # [cxx_name = "raw"] pub fn raw1 (self : Pin < & mut Lifetime > , raw : u8) ; pub unsafe fn vanetza_geonet_Lifetime_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Lifetime) ; # [namespace = "vanetza::geonet"] pub fn store_carry_forward (self : & TrafficClass) -> bool ; # [namespace = "vanetza::geonet"] # [cxx_name = "store_carry_forward"] pub fn store_carry_forward1 (self : Pin < & mut TrafficClass > , flag : bool) ; # [namespace = "vanetza::geonet"] pub fn channel_offload (self : & TrafficClass) -> bool ; # [namespace = "vanetza::geonet"] # [cxx_name = "channel_offload"] pub fn channel_offload1 (self : Pin < & mut TrafficClass > , flag : bool) ; pub fn vanetza_geonet_TrafficClass_raw_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & TrafficClass) -> u8 ; pub unsafe fn vanetza_geonet_TrafficClass_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrafficClass) ; pub unsafe fn vanetza_geonet_TrafficClass_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrafficClass , raw : u8) ; pub unsafe fn vanetza_geonet_ManagementInformationBase_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ManagementInformationBase) ; pub unsafe fn vanetza_geonet_CartesianPosition_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPosition) ; pub unsafe fn vanetza_geonet_GeodeticPosition_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPosition) ; pub unsafe fn vanetza_geonet_Circle_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Circle) ; pub unsafe fn vanetza_geonet_Rectangle_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Rectangle) ; pub unsafe fn vanetza_geonet_Ellipse_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Ellipse) ; # [namespace = "vanetza::geonet"] pub fn geometric_function (arg1 : & Circle , arg2 : & CartesianPosition) -> f64 ; # [namespace = "vanetza::geonet"] # [cxx_name = "geometric_function"] pub fn geometric_function1 (arg1 : & Rectangle , arg2 : & CartesianPosition) -> f64 ; # [namespace = "vanetza::geonet"] # [cxx_name = "geometric_function"] pub fn geometric_function2 (arg1 : & Ellipse , arg2 : & CartesianPosition) -> f64 ; # [doc = " Derive cartesian position ENU from geodetic WGS84 coordinates\n and a WGS84 reference point which becomes the cartesian origin.\n \\param origin WGS84 reference point becoming origin\n \\param position Calculate cartesian coordinates for this point\n \\return Cartesian coordinates of position relative to origin"] pub unsafe fn local_cartesian_autocxx_wrapper_0xaf96dc19e4649ed1 (origin : & GeodeticPosition , position : & GeodeticPosition , placement_return_type : * mut CartesianPosition) ; # [doc = " \\brief Request to send payload per single hop broadcast (SHB).\n If security is enabled, the message gets encapsulated in a security envelope.\n Returns whether data was valid to be sent.\n\n \\param request\n \\param payload from upper layers\n \\return result code if packet has been accepted"] pub fn request_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut Router > , arg1 : & ShbDataRequest , arg2 : UniquePtr < ChunkPacket >) -> DataConfirm ; # [doc = " \\brief Request to send payload per GeoBroadcast (GBC).\n If security is enabled, the message gets encapsulated in a security envelope.\n Returns whether data was valid to be sent.\n\n \\param request\n \\param payload from upper layers\n \\return result code if packet has been accepted"] pub fn request1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut Router > , arg1 : & GbcDataRequest , arg2 : UniquePtr < ChunkPacket >) -> DataConfirm ; pub fn request2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut Router > , arg1 : & GucDataRequest , arg2 : UniquePtr < ChunkPacket >) -> DataConfirm ; pub fn request3_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut Router > , arg1 : & GacDataRequest , arg2 : UniquePtr < ChunkPacket >) -> DataConfirm ; pub fn request4_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut Router > , arg1 : & TsbDataRequest , arg2 : UniquePtr < ChunkPacket >) -> DataConfirm ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Update router's local position vector\n\n \\param fix current position fix"] pub fn update_position (self : Pin < & mut Router > , arg1 : & PositionFix) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Register a transport protocol handler.\n\n \\param proto register handler for this upper protocol\n \\param ifc use this interface or disable handling if nullptr"] pub unsafe fn set_transport_handler (self : Pin < & mut Router > , proto : UpperProtocol , ifc : * mut TransportInterface) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Register security entity used when itsGnSecurity is enabled\n\n \\param entity security entity"] pub unsafe fn set_security_entity (self : Pin < & mut Router > , entity : * mut SecurityEntity) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Register access layer interface\n\n \\param ifc interface used for passing packets down to access layer"] pub unsafe fn set_access_interface (self : Pin < & mut Router > , ifc : * mut RequestInterface) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Register generator for DCC-MCO fields\n\n \\param dcc DCC-MCO field generator or nullptr for disabling feature"] pub unsafe fn set_dcc_field_generator (self : Pin < & mut Router > , dcc : * mut DccFieldGenerator) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Set Router's own GeoNetworking address\n\n \\param addr"] pub fn set_address (self : Pin < & mut Router > , arg1 : & Address) ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Get Management Information Base (MIB)\n \\return read-only reference to MIB"] pub fn get_mib (self : & Router) -> & ManagementInformationBase ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Get the Contention-Based-Forwarding buffer\n\n \\return read-only reference to CBF packet buffer"] pub fn get_cbf_buffer (self : & Router) -> & CbfPacketBuffer ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Get the LocationTable.\n The table holds information about neighbouring ITS-Routers.\n\n \\return read-only reference to LocationTable"] pub fn get_location_table (self : & Router) -> & LocationTable ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Get the local position vector.\n This vector describes the current position of the router.\n\n \\return read-only reference to LongPositionVector"] pub fn get_local_position_vector (self : & Router) -> & LongPositionVector ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Check if router is outside the sectorial contention area\n See TS 102 636-4-1 v1.2.3 section E.4 and figure E.2 for details.\n\n \\param sender\n \\param forwarder\n \\return bool true if either sender or forwarder is outside"] pub fn outside_sectorial_contention_area (self : & Router , sender : & MacAddress , forwarder : & MacAddress) -> bool ; # [namespace = "vanetza::geonet"] # [doc = " \\brief Set seed for internal random number generator (RNG)\n RNG is used e.g. for random Beacon jitter\n\n \\param seed reset RNG's state to this seed"] pub fn set_random_seed (self : Pin < & mut Router > , seed : c_ulong) ; pub unsafe fn vanetza_geonet_Router_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Router , arg1 : Pin < & mut Runtime > , arg2 : & ManagementInformationBase) ; pub unsafe fn Router_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Router) ; # [namespace = "vanetza::geonet"] pub fn accepted (self : & DataConfirm) -> bool ; # [namespace = "vanetza::geonet"] pub fn rejected (self : & DataConfirm) -> bool ; pub unsafe fn vanetza_geonet_DataConfirm_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataConfirm) ; pub unsafe fn vanetza_geonet_DataConfirm_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataConfirm , code : DataConfirm_ResultCode) ; pub unsafe fn TransportInterface_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TransportInterface) ; pub unsafe fn HeaderA_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut HeaderA ; pub unsafe fn HeaderA_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut HeaderA) ; # [namespace = "vanetza::btp"] type HeaderA = super :: bindgen :: root :: vanetza :: btp :: HeaderA ; pub unsafe fn HeaderB_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut HeaderB ; pub unsafe fn HeaderB_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut HeaderB) ; # [namespace = "vanetza::btp"] type HeaderB = super :: bindgen :: root :: vanetza :: btp :: HeaderB ; pub unsafe fn DataRequestGeoNetParams_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataRequestGeoNetParams ; pub unsafe fn DataRequestGeoNetParams_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataRequestGeoNetParams) ; # [namespace = "vanetza::btp"] type DataRequestGeoNetParams = super :: bindgen :: root :: vanetza :: btp :: DataRequestGeoNetParams ; pub unsafe fn DataRequestA_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataRequestA ; pub unsafe fn DataRequestA_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataRequestA) ; # [namespace = "vanetza::btp"] type DataRequestA = super :: bindgen :: root :: vanetza :: btp :: DataRequestA ; pub unsafe fn DataRequestB_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DataRequestB ; pub unsafe fn DataRequestB_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DataRequestB) ; # [namespace = "vanetza::btp"] type DataRequestB = super :: bindgen :: root :: vanetza :: btp :: DataRequestB ; # [namespace = "vanetza::btp"] pub fn serialize (arg1 : Pin < & mut OutputArchive > , arg2 : & HeaderA) ; # [namespace = "vanetza::btp"] pub fn deserialize (arg1 : Pin < & mut InputArchive > , arg2 : Pin < & mut HeaderA >) ; pub unsafe fn vanetza_btp_DataRequestA_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestA) ; pub unsafe fn vanetza_btp_DataRequestB_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestB) ; pub unsafe fn vanetza_MacAddress_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut MacAddress) ; pub unsafe fn vanetza_MacAddress_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut MacAddress , args : * mut std_initializer_list_uint8_t_AutocxxConcrete) ; pub unsafe fn vanetza_MacAddress_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut MacAddress , arg1 : & MacAddress) ; pub unsafe fn vanetza_MacAddress_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut MacAddress , arg1 : * mut MacAddress) ; # [namespace = "vanetza"] # [doc = " Access ByteBufferConvertible of specific layer\n \\param layer ol Access this layer's data\n \\return ByteBufferConvertible, might be empty"] pub fn layer < 'a > (self : Pin < & 'a mut ChunkPacket > , ol : OsiLayer) -> Pin < & 'a mut ByteBufferConvertible > ; # [namespace = "vanetza"] # [cxx_name = "layer"] # [doc = " \\copydoc ChunkPacket::layer"] pub fn layer1 (self : & ChunkPacket , ol : OsiLayer) -> & ByteBufferConvertible ; # [doc = " Get size of whole payload\n \\return payload size in bytes"] pub fn vanetza_ChunkPacket_size_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & ChunkPacket) -> usize ; # [namespace = "vanetza"] # [cxx_name = "size"] # [doc = " Get size of payload from specified layer range\n \\param from start counting including this layer\n \\param to stop counting including this layer\n \\return payload size in bytes"] pub fn size1 (self : & ChunkPacket , from : OsiLayer , to : OsiLayer) -> usize ; # [doc = " Extract a range of layers from this packet to a new one.\n The respective layers of this ChunkPacket are empty afterwards.\n \\param from start at this layer (inclusive)\n \\param to stop at this layer (inclusive)\n \\return new packet containing layers of specified range"] pub unsafe fn extract_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut ChunkPacket > , from : OsiLayer , to : OsiLayer , placement_return_type : * mut ChunkPacket) ; pub unsafe fn vanetza_ChunkPacket_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ChunkPacket) ; pub unsafe fn vanetza_ChunkPacket_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ChunkPacket , arg1 : & ChunkPacket) ; pub unsafe fn vanetza_ChunkPacket_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ChunkPacket , arg1 : * mut ChunkPacket) ; # [namespace = "vanetza"] # [doc = " Set boundary of layer data.\n Data beyond boundary belongs to next upper layer afterwards.\n \\param layer set boundary of this layer\n \\param bytes length of layer\n \\note Never set boundary larger than previous layer length!"] pub fn set_boundary (self : Pin < & mut CohesivePacket > , arg1 : OsiLayer , bytes : c_uint) ; # [namespace = "vanetza"] # [doc = " Trim size of packet, i.e. cut bytes at the end if too long.\n \\param from start counting with this layer\n \\param bytes target length in bytes"] pub fn trim (self : Pin < & mut CohesivePacket > , from : OsiLayer , bytes : c_uint) ; # [doc = " Get size of whole packet\n \\return length in bytes"] pub fn vanetza_CohesivePacket_size_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CohesivePacket) -> usize ; # [doc = " Get size of a single layer in packet\n \\param single_layer which layer has to be considered\n \\return length in bytes"] pub fn vanetza_CohesivePacket_size1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CohesivePacket , single_layer : OsiLayer) -> usize ; # [namespace = "vanetza"] # [cxx_name = "size"] # [doc = " Get size of several layers\n \\param from start counting with this layer\n \\param to stop counting after this layer\n \\return length in bytes"] pub fn size2 (self : & CohesivePacket , from : OsiLayer , to : OsiLayer) -> usize ; # [namespace = "vanetza"] # [doc = " Non-mutable access to internal byte buffer\n \\return const byte buffer reference"] pub fn buffer < 'a > (self : & 'a CohesivePacket) -> & 'a CxxVector < u8 > ; # [doc = " Create packet from buffer and assign all bytes to given layer\n \\param buffer copy data from this buffer\n \\param layer all bytes belong to this layer (at least at first)"] pub unsafe fn vanetza_CohesivePacket_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CohesivePacket , buffer : & CxxVector < u8 > , layer : OsiLayer) ; pub unsafe fn vanetza_CohesivePacket_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CohesivePacket , buffer : * mut CxxVector < u8 > , layer : OsiLayer) ; pub unsafe fn vanetza_CohesivePacket_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CohesivePacket , arg1 : & CohesivePacket) ; pub unsafe fn vanetza_CohesivePacket_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CohesivePacket , arg1 : * mut CohesivePacket) ; pub unsafe fn PacketVariantWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut PacketVariantWrapper ; pub unsafe fn PacketVariantWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut PacketVariantWrapper) ; # [namespace = "vanetza_wrapper"] type PacketVariantWrapper = super :: bindgen :: root :: vanetza_wrapper :: PacketVariantWrapper ; pub unsafe fn AccelerationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut AccelerationWrapper ; pub unsafe fn AccelerationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut AccelerationWrapper) ; # [namespace = "vanetza_wrapper::units"] type AccelerationWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: AccelerationWrapper ; pub unsafe fn AngleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut AngleWrapper ; pub unsafe fn AngleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut AngleWrapper) ; # [namespace = "vanetza_wrapper::units"] type AngleWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: AngleWrapper ; pub unsafe fn GeoAngleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GeoAngleWrapper ; pub unsafe fn GeoAngleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GeoAngleWrapper) ; # [namespace = "vanetza_wrapper::units"] type GeoAngleWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: GeoAngleWrapper ; pub unsafe fn TrueNorthWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut TrueNorthWrapper ; pub unsafe fn TrueNorthWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut TrueNorthWrapper) ; # [namespace = "vanetza_wrapper::units"] type TrueNorthWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: TrueNorthWrapper ; pub unsafe fn AngularVelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut AngularVelocityWrapper ; pub unsafe fn AngularVelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut AngularVelocityWrapper) ; # [namespace = "vanetza_wrapper::units"] type AngularVelocityWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: AngularVelocityWrapper ; pub unsafe fn AreaWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut AreaWrapper ; pub unsafe fn AreaWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut AreaWrapper) ; # [namespace = "vanetza_wrapper::units"] type AreaWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: AreaWrapper ; pub unsafe fn CurvatureWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CurvatureWrapper ; pub unsafe fn CurvatureWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CurvatureWrapper) ; # [namespace = "vanetza_wrapper::units"] type CurvatureWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: CurvatureWrapper ; pub unsafe fn FrequencyWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut FrequencyWrapper ; pub unsafe fn FrequencyWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut FrequencyWrapper) ; # [namespace = "vanetza_wrapper::units"] type FrequencyWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: FrequencyWrapper ; pub unsafe fn LengthWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut LengthWrapper ; pub unsafe fn LengthWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut LengthWrapper) ; # [namespace = "vanetza_wrapper::units"] type LengthWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: LengthWrapper ; pub unsafe fn DurationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut DurationWrapper ; pub unsafe fn DurationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut DurationWrapper) ; # [namespace = "vanetza_wrapper::units"] type DurationWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: DurationWrapper ; pub unsafe fn VelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut VelocityWrapper ; pub unsafe fn VelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut VelocityWrapper) ; # [namespace = "vanetza_wrapper::units"] type VelocityWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: VelocityWrapper ; pub unsafe fn NauticalVelocityWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut NauticalVelocityWrapper ; pub unsafe fn NauticalVelocityWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut NauticalVelocityWrapper) ; # [namespace = "vanetza_wrapper::units"] type NauticalVelocityWrapper = super :: bindgen :: root :: vanetza_wrapper :: units :: NauticalVelocityWrapper ; # [namespace = "vanetza_wrapper::units"] pub fn as_meters_per_second_squared (self : & AccelerationWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_AccelerationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AccelerationWrapper , meters_per_second_squared : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_radians (self : & AngleWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_AngleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngleWrapper , radians : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_degrees (self : & GeoAngleWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_GeoAngleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeoAngleWrapper , degrees : f64) ; pub fn vanetza_wrapper_units_TrueNorthWrapper_as_degrees_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & TrueNorthWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_TrueNorthWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrueNorthWrapper , degrees : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_radians_per_second (self : & AngularVelocityWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_AngularVelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngularVelocityWrapper , radians_per_second : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_square_meters (self : & AreaWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_AreaWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AreaWrapper , square_meters : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_reciprocal_meters (self : & CurvatureWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_CurvatureWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CurvatureWrapper , reciprocal_metre_value : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_hertz (self : & FrequencyWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_FrequencyWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut FrequencyWrapper , hertz : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_meters (self : & LengthWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_LengthWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LengthWrapper , meters : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_seconds (self : & DurationWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_DurationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DurationWrapper , seconds : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_meters_per_second (self : & VelocityWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_VelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut VelocityWrapper , meter_per_second : f64) ; # [namespace = "vanetza_wrapper::units"] pub fn as_knots (self : & NauticalVelocityWrapper) -> f64 ; pub unsafe fn vanetza_wrapper_units_NauticalVelocityWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut NauticalVelocityWrapper , knot : f64) ; pub unsafe fn GeonetAreaWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GeonetAreaWrapper ; pub unsafe fn GeonetAreaWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GeonetAreaWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type GeonetAreaWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper ; pub unsafe fn GeodeticPositionWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut GeodeticPositionWrapper ; pub unsafe fn GeodeticPositionWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut GeodeticPositionWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type GeodeticPositionWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper ; pub unsafe fn CartesianPositionWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CartesianPositionWrapper ; pub unsafe fn CartesianPositionWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CartesianPositionWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type CartesianPositionWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper ; pub unsafe fn CircleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CircleWrapper ; pub unsafe fn CircleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CircleWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type CircleWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: CircleWrapper ; pub unsafe fn RectangleWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut RectangleWrapper ; pub unsafe fn RectangleWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut RectangleWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type RectangleWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: RectangleWrapper ; pub unsafe fn EllipseWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut EllipseWrapper ; pub unsafe fn EllipseWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut EllipseWrapper) ; # [namespace = "vanetza_wrapper::geonet"] type EllipseWrapper = super :: bindgen :: root :: vanetza_wrapper :: geonet :: EllipseWrapper ; pub unsafe fn RouterRef_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut RouterRef ; pub unsafe fn RouterRef_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut RouterRef) ; # [namespace = "vanetza_wrapper::geonet"] type RouterRef = super :: bindgen :: root :: vanetza_wrapper :: geonet :: RouterRef ; pub unsafe fn latitude_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GeodeticPositionWrapper , placement_return_type : * mut GeoAngleWrapper) ; pub unsafe fn longitude_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GeodeticPositionWrapper , placement_return_type : * mut GeoAngleWrapper) ; pub fn vanetza_wrapper_geonet_GeodeticPositionWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GeodeticPositionWrapper) -> & GeodeticPosition ; pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & GeodeticPositionWrapper , placement_return_type : * mut GeodeticPosition) ; pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper , src : & GeodeticPosition) ; pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper , src : * mut GeodeticPosition) ; pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper , lat : & GeoAngleWrapper , lon : & GeoAngleWrapper) ; pub unsafe fn x_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CartesianPositionWrapper , placement_return_type : * mut LengthWrapper) ; pub unsafe fn y_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CartesianPositionWrapper , placement_return_type : * mut LengthWrapper) ; pub fn vanetza_wrapper_geonet_CartesianPositionWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CartesianPositionWrapper) -> & CartesianPosition ; pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CartesianPositionWrapper , placement_return_type : * mut CartesianPosition) ; pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper , src : & CartesianPosition) ; pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper , src : * mut CartesianPosition) ; pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper , x : & LengthWrapper , y : & LengthWrapper) ; pub unsafe fn r_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CircleWrapper , placement_return_type : * mut LengthWrapper) ; pub fn vanetza_wrapper_geonet_CircleWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CircleWrapper) -> & Circle ; pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & CircleWrapper , placement_return_type : * mut Circle) ; pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper , src : & Circle) ; pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper , src : * mut Circle) ; pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper , r : & LengthWrapper) ; pub unsafe fn a_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & RectangleWrapper , placement_return_type : * mut LengthWrapper) ; pub unsafe fn b_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & RectangleWrapper , placement_return_type : * mut LengthWrapper) ; pub fn vanetza_wrapper_geonet_RectangleWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & RectangleWrapper) -> & Rectangle ; pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & RectangleWrapper , placement_return_type : * mut Rectangle) ; pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper , src : & Rectangle) ; pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper , src : * mut Rectangle) ; pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper , a : & LengthWrapper , b : & LengthWrapper) ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_a_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & EllipseWrapper , placement_return_type : * mut LengthWrapper) ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_b_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & EllipseWrapper , placement_return_type : * mut LengthWrapper) ; pub fn vanetza_wrapper_geonet_EllipseWrapper_inner_ref_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & EllipseWrapper) -> & Ellipse ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_inner_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & EllipseWrapper , placement_return_type : * mut Ellipse) ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper , src : & Ellipse) ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper , src : * mut Ellipse) ; pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper , a : & LengthWrapper , b : & LengthWrapper) ; pub unsafe fn distance_autocxx_wrapper_0xaf96dc19e4649ed1 (lhs : & GeodeticPosition , rhs : & GeodeticPosition , placement_return_type : * mut LengthWrapper) ; pub unsafe fn canonicalize_autocxx_wrapper_0xaf96dc19e4649ed1 (point : & CartesianPosition , azimuth : * mut AngleWrapper , placement_return_type : * mut CartesianPosition) ; # [namespace = "vanetza_wrapper::geonet"] # [cxx_name = "inside_or_at_border"] pub fn vanetza_wrapper_geonet_inside_or_at_border (area : & GeonetAreaWrapper , pos : & GeodeticPosition) -> bool ; pub unsafe fn area_size_autocxx_wrapper_0xaf96dc19e4649ed1 (area : & GeonetAreaWrapper , placement_return_type : * mut AreaWrapper) ; pub fn vanetza_wrapper_geonet_RouterRef_indicate_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut RouterRef > , packet : UniquePtr < PacketVariantWrapper > , sender : & MacAddress , destination : & MacAddress) ; pub unsafe fn vanetza_wrapper_geonet_RouterRef_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RouterRef , ref_ : Pin < & mut Router >) ; pub unsafe fn BtpDataIndicationWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut BtpDataIndicationWrapper ; pub unsafe fn BtpDataIndicationWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut BtpDataIndicationWrapper) ; # [namespace = "vanetza_wrapper::btp"] type BtpDataIndicationWrapper = super :: bindgen :: root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper ; pub unsafe fn BTPIndicationInterfaceWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut BTPIndicationInterfaceWrapper ; pub unsafe fn BTPIndicationInterfaceWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut BTPIndicationInterfaceWrapper) ; # [namespace = "vanetza_wrapper::btp"] type BTPIndicationInterfaceWrapper ; pub unsafe fn BTPRequestInterfaceWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut BTPRequestInterfaceWrapper ; pub unsafe fn BTPRequestInterfaceWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut BTPRequestInterfaceWrapper) ; # [namespace = "vanetza_wrapper::btp"] type BTPRequestInterfaceWrapper ; pub unsafe fn HeaderB_wrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut HeaderB_wrapper ; pub unsafe fn HeaderB_wrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut HeaderB_wrapper) ; # [namespace = "vanetza_wrapper::btp"] type HeaderB_wrapper = super :: bindgen :: root :: vanetza_wrapper :: btp :: HeaderB_wrapper ; pub unsafe fn vanetza_wrapper_btp_BtpDataIndicationWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BtpDataIndicationWrapper) ; pub unsafe fn vanetza_wrapper_btp_BtpDataIndicationWrapper_new1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BtpDataIndicationWrapper , arg1 : & DataIndication , arg2 : & HeaderA) ; pub unsafe fn vanetza_wrapper_btp_BtpDataIndicationWrapper_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BtpDataIndicationWrapper , arg1 : & DataIndication , arg2 : & HeaderB) ; pub unsafe fn BTPIndicationInterfaceWrapper_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPIndicationInterfaceWrapper) ; pub fn vanetza_wrapper_btp_BTPRequestInterfaceWrapper_request_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut BTPRequestInterfaceWrapper > , arg1 : & DataRequestB , arg2 : UniquePtr < ChunkPacket >) ; pub unsafe fn BTPRequestInterfaceWrapper_destructor_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPRequestInterfaceWrapper) ; pub unsafe fn GetHeaderB_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : Pin < & mut HeaderB_wrapper > , placement_return_type : * mut HeaderB) ; pub unsafe fn vanetza_wrapper_btp_HeaderB_wrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB_wrapper , destination_port_16t : u16 , destination_port_info_16t : u16) ; pub unsafe fn BTPHeaderAbyte_buffer_implWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut BTPHeaderAbyte_buffer_implWrapper ; pub unsafe fn BTPHeaderAbyte_buffer_implWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut BTPHeaderAbyte_buffer_implWrapper) ; # [namespace = "vanetza_wrapper::convertible"] type BTPHeaderAbyte_buffer_implWrapper = super :: bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper ; pub unsafe fn BTPHeaderBbyte_buffer_implWrapper_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut BTPHeaderBbyte_buffer_implWrapper ; pub unsafe fn BTPHeaderBbyte_buffer_implWrapper_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut BTPHeaderBbyte_buffer_implWrapper) ; # [namespace = "vanetza_wrapper::convertible"] type BTPHeaderBbyte_buffer_implWrapper = super :: bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper ; pub unsafe fn vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderAbyte_buffer_implWrapper , header : & HeaderA) ; pub fn vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_convert_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & BTPHeaderAbyte_buffer_implWrapper , buffer : Pin < & mut CxxVector < u8 > >) ; pub fn vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_size_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & BTPHeaderAbyte_buffer_implWrapper) -> usize ; pub unsafe fn vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderBbyte_buffer_implWrapper , header : & HeaderB) ; pub fn vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_convert_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & BTPHeaderBbyte_buffer_implWrapper , buffer : Pin < & mut CxxVector < u8 > >) ; pub fn vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_size_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : & BTPHeaderBbyte_buffer_implWrapper) -> usize ; pub unsafe fn btpb_write_autocxx_wrapper_0xaf96dc19e4649ed1 (interface : UniquePtr < CxxString > , buf : * mut c_void , len : usize) -> c_int ; pub unsafe fn btpb_read_autocxx_wrapper_0xaf96dc19e4649ed1 (interface : UniquePtr < CxxString > , buff : * mut CxxVector < u8 >) -> c_int ; # [doc = "Synthesized destructor."] pub unsafe fn MacAddress_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut MacAddress) ; # [doc = "Synthesized destructor."] pub unsafe fn ChunkPacket_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ChunkPacket) ; # [doc = "Synthesized destructor."] pub unsafe fn CohesivePacket_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CohesivePacket) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_Address_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Address , other : * mut Address) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_Address_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Address , other : & Address) ; # [doc = "Synthesized destructor."] pub unsafe fn Address_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Address) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_Lifetime_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Lifetime , other : * mut Lifetime) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_Lifetime_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Lifetime , other : & Lifetime) ; # [doc = "Synthesized destructor."] pub unsafe fn Lifetime_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Lifetime) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_TrafficClass_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrafficClass , other : * mut TrafficClass) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_TrafficClass_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrafficClass , other : & TrafficClass) ; # [doc = "Synthesized destructor."] pub unsafe fn TrafficClass_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrafficClass) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_CartesianPosition_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPosition , other : * mut CartesianPosition) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_CartesianPosition_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPosition , other : & CartesianPosition) ; # [doc = "Synthesized destructor."] pub unsafe fn CartesianPosition_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPosition) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_GeodeticPosition_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPosition , other : * mut GeodeticPosition) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_GeodeticPosition_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPosition , other : & GeodeticPosition) ; # [doc = "Synthesized destructor."] pub unsafe fn GeodeticPosition_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPosition) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_Circle_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Circle , other : * mut Circle) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_Circle_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Circle , other : & Circle) ; # [doc = "Synthesized destructor."] pub unsafe fn Circle_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Circle) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_Rectangle_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Rectangle , other : * mut Rectangle) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_Rectangle_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Rectangle , other : & Rectangle) ; # [doc = "Synthesized destructor."] pub unsafe fn Rectangle_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Rectangle) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_Ellipse_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Ellipse , other : * mut Ellipse) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_Ellipse_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Ellipse , other : & Ellipse) ; # [doc = "Synthesized destructor."] pub unsafe fn Ellipse_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut Ellipse) ; # [doc = "Synthesized destructor."] pub unsafe fn DataRequestWithAddress_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestWithAddress) ; # [doc = "Synthesized destructor."] pub unsafe fn GucDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GucDataRequest) ; # [doc = "Synthesized destructor."] pub unsafe fn ShbDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ShbDataRequest) ; # [doc = "Synthesized destructor."] pub unsafe fn TsbDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TsbDataRequest) ; # [doc = "Synthesized default constructor."] pub unsafe fn vanetza_btp_HeaderA_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderA) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_btp_HeaderA_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderA , other : * mut HeaderA) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_btp_HeaderA_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderA , other : & HeaderA) ; # [doc = "Synthesized destructor."] pub unsafe fn HeaderA_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderA) ; # [doc = "Synthesized default constructor."] pub unsafe fn vanetza_btp_HeaderB_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_btp_HeaderB_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB , other : * mut HeaderB) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_btp_HeaderB_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB , other : & HeaderB) ; # [doc = "Synthesized destructor."] pub unsafe fn HeaderB_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB) ; # [doc = "Synthesized default constructor."] pub unsafe fn vanetza_wrapper_PacketVariantWrapper_new_autocxx_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut PacketVariantWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_PacketVariantWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut PacketVariantWrapper , other : * mut PacketVariantWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn PacketVariantWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut PacketVariantWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_AccelerationWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AccelerationWrapper , other : * mut AccelerationWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_AccelerationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AccelerationWrapper , other : & AccelerationWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn AccelerationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AccelerationWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_AngleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngleWrapper , other : * mut AngleWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_AngleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngleWrapper , other : & AngleWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn AngleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngleWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_GeoAngleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeoAngleWrapper , other : * mut GeoAngleWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_GeoAngleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeoAngleWrapper , other : & GeoAngleWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn GeoAngleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeoAngleWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_TrueNorthWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrueNorthWrapper , other : * mut TrueNorthWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_TrueNorthWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrueNorthWrapper , other : & TrueNorthWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn TrueNorthWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut TrueNorthWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_AngularVelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngularVelocityWrapper , other : * mut AngularVelocityWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_AngularVelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngularVelocityWrapper , other : & AngularVelocityWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn AngularVelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AngularVelocityWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_AreaWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AreaWrapper , other : * mut AreaWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_AreaWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AreaWrapper , other : & AreaWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn AreaWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut AreaWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_CurvatureWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CurvatureWrapper , other : * mut CurvatureWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_CurvatureWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CurvatureWrapper , other : & CurvatureWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn CurvatureWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CurvatureWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_FrequencyWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut FrequencyWrapper , other : * mut FrequencyWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_FrequencyWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut FrequencyWrapper , other : & FrequencyWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn FrequencyWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut FrequencyWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_LengthWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LengthWrapper , other : * mut LengthWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_LengthWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LengthWrapper , other : & LengthWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn LengthWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LengthWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_DurationWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DurationWrapper , other : * mut DurationWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_DurationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DurationWrapper , other : & DurationWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn DurationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DurationWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_VelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut VelocityWrapper , other : * mut VelocityWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_VelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut VelocityWrapper , other : & VelocityWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn VelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut VelocityWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_units_NauticalVelocityWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut NauticalVelocityWrapper , other : * mut NauticalVelocityWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_units_NauticalVelocityWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut NauticalVelocityWrapper , other : & NauticalVelocityWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn NauticalVelocityWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut NauticalVelocityWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper , other : * mut GeodeticPositionWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_GeodeticPositionWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper , other : & GeodeticPositionWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn GeodeticPositionWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeodeticPositionWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper , other : * mut CartesianPositionWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_CartesianPositionWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper , other : & CartesianPositionWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn CartesianPositionWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CartesianPositionWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper , other : * mut CircleWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_CircleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper , other : & CircleWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn CircleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut CircleWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper , other : * mut RectangleWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_RectangleWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper , other : & RectangleWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn RectangleWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RectangleWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper , other : * mut EllipseWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_EllipseWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper , other : & EllipseWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn EllipseWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut EllipseWrapper) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_geonet_RouterRef_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RouterRef , other : * mut RouterRef) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_geonet_RouterRef_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RouterRef , other : & RouterRef) ; # [doc = "Synthesized destructor."] pub unsafe fn RouterRef_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut RouterRef) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_wrapper_btp_HeaderB_wrapper_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB_wrapper , other : * mut HeaderB_wrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_btp_HeaderB_wrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB_wrapper , other : & HeaderB_wrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn HeaderB_wrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut HeaderB_wrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_convertible_BTPHeaderAbyte_buffer_implWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderAbyte_buffer_implWrapper , other : & BTPHeaderAbyte_buffer_implWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn BTPHeaderAbyte_buffer_implWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderAbyte_buffer_implWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_convertible_BTPHeaderBbyte_buffer_implWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderBbyte_buffer_implWrapper , other : & BTPHeaderBbyte_buffer_implWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn BTPHeaderBbyte_buffer_implWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BTPHeaderBbyte_buffer_implWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn PositionFix_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut PositionFix) ; # [doc = "Synthesized destructor."] pub unsafe fn LongPositionVector_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut LongPositionVector) ; # [doc = "Synthesized destructor."] pub unsafe fn ShortPositionVector_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ShortPositionVector) ; # [doc = "Synthesized destructor."] pub unsafe fn ManagementInformationBase_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ManagementInformationBase) ; # [doc = "Synthesized destructor."] pub unsafe fn DataRequestWithArea_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestWithArea) ; # [doc = "Synthesized destructor."] pub unsafe fn GbcDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GbcDataRequest) ; # [doc = "Synthesized destructor."] pub unsafe fn GacDataRequest_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GacDataRequest) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_geonet_DataConfirm_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataConfirm , other : * mut DataConfirm) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_geonet_DataConfirm_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataConfirm , other : & DataConfirm) ; # [doc = "Synthesized destructor."] pub unsafe fn DataConfirm_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataConfirm) ; # [doc = "Synthesized destructor."] pub unsafe fn DataIndication_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataIndication) ; # [doc = "Synthesized destructor."] pub unsafe fn DataRequestGeoNetParams_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestGeoNetParams) ; # [doc = "Synthesized destructor."] pub unsafe fn DataRequestA_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestA) ; # [doc = "Synthesized destructor."] pub unsafe fn DataRequestB_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut DataRequestB) ; # [doc = "Synthesized destructor."] pub unsafe fn GeonetAreaWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut GeonetAreaWrapper) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_wrapper_btp_BtpDataIndicationWrapper_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BtpDataIndicationWrapper , other : & BtpDataIndicationWrapper) ; # [doc = "Synthesized destructor."] pub unsafe fn BtpDataIndicationWrapper_synthetic_destructor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut BtpDataIndicationWrapper) ; # [namespace = "vanetza::security"] type SecurityEntity ; # [namespace = "vanetza::dcc"] # [doc = " DCC_access interface for data request from upper layers"] type RequestInterface ; # [namespace = "vanetza::geonet"] type DccFieldGenerator ; # [namespace = "vanetza::geonet"] # [doc = " CbfPacketBuffer facilitates implementation of contention based forwarding"] type CbfPacketBuffer = super :: bindgen :: root :: vanetza :: geonet :: CbfPacketBuffer ; # [namespace = "vanetza::geonet"] # [doc = " GeoNetworking LocationTable\n See section 7.1 of EN 302 636-4-1 for details."] type LocationTable = super :: bindgen :: root :: vanetza :: geonet :: LocationTable ; # [namespace = "vanetza"] # [doc = " Runtime provides current time and enables scheduling of tasks for later execution.\n\n All calls to Runtime and objects using the same Runtime have to be invoked from same thread!"] type Runtime ; # [namespace = "vanetza"] # [doc = " This is a drop-in replacement for boost::archive::binary_oarchive"] type OutputArchive = super :: bindgen :: root :: vanetza :: OutputArchive ; # [namespace = "vanetza"] # [doc = " This is a drop-in replacement for boost::archive::binary_iarchive"] type InputArchive = super :: bindgen :: root :: vanetza :: InputArchive ; type std_initializer_list_uint8_t_AutocxxConcrete ; # [namespace = "vanetza"] type OsiLayer = super :: bindgen :: root :: vanetza :: OsiLayer ; # [namespace = "vanetza"] # [doc = " ByteBufferConvertible is an extensible mechanism for providing\n ByteBuffer representations of various data structures and objects.\n\n ByteBufferConvertible utilizes type erasure and accesses byte buffer data\n through the convertible::byte_buffer interface.\n Extending ByteBufferConvertible is possible by providing specializations\n of convertible::byte_buffer_impl<T> implementing convertible::byte_buffer."] type ByteBufferConvertible = super :: bindgen :: root :: vanetza :: ByteBufferConvertible ; pub unsafe fn CbfPacketBuffer_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut CbfPacketBuffer ; pub unsafe fn CbfPacketBuffer_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut CbfPacketBuffer) ; pub unsafe fn LocationTable_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut LocationTable ; pub unsafe fn LocationTable_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut LocationTable) ; pub unsafe fn OutputArchive_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut OutputArchive ; pub unsafe fn OutputArchive_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut OutputArchive) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_OutputArchive_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut OutputArchive , other : * mut OutputArchive) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_OutputArchive_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut OutputArchive , other : & OutputArchive) ; pub unsafe fn InputArchive_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut InputArchive ; pub unsafe fn InputArchive_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut InputArchive) ; # [doc = "Synthesized move constructor."] pub unsafe fn vanetza_InputArchive_new_synthetic_move_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut InputArchive , other : * mut InputArchive) ; # [doc = "Synthesized copy constructor."] pub unsafe fn vanetza_InputArchive_new_synthetic_const_copy_ctor_0xaf96dc19e4649ed1_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut InputArchive , other : & InputArchive) ; pub unsafe fn ByteBufferConvertible_alloc_autocxx_wrapper_0xaf96dc19e4649ed1 () -> * mut ByteBufferConvertible ; pub unsafe fn ByteBufferConvertible_free_autocxx_wrapper_0xaf96dc19e4649ed1 (arg0 : * mut ByteBufferConvertible) ; pub unsafe fn vanetza_ByteBufferConvertible_new2_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ByteBufferConvertible , arg1 : & ByteBufferConvertible) ; pub unsafe fn vanetza_ByteBufferConvertible_new3_autocxx_wrapper_0xaf96dc19e4649ed1 (autocxx_gen_this : * mut ByteBufferConvertible , other : * mut ByteBufferConvertible) ; type c_ulong = autocxx :: c_ulong ; type c_uint = autocxx :: c_uint ; type c_void = autocxx :: c_void ; type c_int = autocxx :: c_int ; include ! ("vanetza/common/its_aid.hpp") ; include ! ("vanetza/common/position_fix.hpp") ; include ! ("vanetza/net/mac_address.hpp") ; include ! ("vanetza/net/chunk_packet.hpp") ; include ! ("vanetza/net/cohesive_packet.hpp") ; include ! ("vanetza/net/cohesive_packet.hpp") ; include ! ("vanetza/net/packet_variant.hpp") ; include ! ("vanetza/geonet/router.hpp") ; include ! ("vanetza/geonet/address.hpp") ; include ! ("vanetza/geonet/lifetime.hpp") ; include ! ("vanetza/geonet/traffic_class.hpp") ; include ! ("vanetza/geonet/data_request.hpp") ; include ! ("vanetza/geonet/data_confirm.hpp") ; include ! ("vanetza/geonet/areas.hpp") ; include ! ("vanetza/geonet/mib.hpp") ; include ! ("vanetza/geonet/station_type.hpp") ; include ! ("vanetza/geonet/position_vector.hpp") ; include ! ("vanetza/geonet/transport_interface.hpp") ; include ! ("vanetza/geonet/interface.hpp") ; include ! ("vanetza/geonet/data_indication.hpp") ; include ! ("vanetza/btp/data_indication.hpp") ; include ! ("vanetza/btp/data_interface.hpp") ; include ! ("vanetza/btp/data_request.hpp") ; include ! ("vanetza/btp/header_conversion.hpp") ; include ! ("vanetza/common/byte_buffer_convertible.hpp") ; include ! ("vanetza/btp/header.hpp") ; include ! ("vanetza/btp/port_dispatcher.hpp") ; include ! ("vanetza/btp/ports.hpp") ; include ! ("vanetza/btp_write/btpb_write.hpp") ; include ! ("vanetza/btp_write/btpb_read.hpp") ; include ! ("vanetza_wrapper.hpp") ; include ! ("autocxxgen_ffi.h") ; } extern "Rust" { } } # [allow (unused_imports)] use bindgen :: root ; pub use cxxbridge :: autocxx_make_string_0xaf96dc19e4649ed1 as make_string ; pub use bindgen :: root :: btpb_write ; pub use bindgen :: root :: btpb_read ; pub use bindgen :: root :: uint_fast32_t ; pub use bindgen :: root :: std_initializer_list_uint8_t_AutocxxConcrete ; pub mod vanetza { pub use super :: bindgen :: root :: vanetza :: ItsAid ; pub use super :: bindgen :: root :: vanetza :: PositionFix ; pub use super :: bindgen :: root :: vanetza :: MacAddress ; pub use super :: bindgen :: root :: vanetza :: ChunkPacket ; pub use super :: bindgen :: root :: vanetza :: CohesivePacket ; pub use super :: bindgen :: root :: vanetza :: PacketVariant ; pub use super :: bindgen :: root :: vanetza :: DownPacket ; pub use super :: bindgen :: root :: vanetza :: Runtime ; pub use super :: bindgen :: root :: vanetza :: OutputArchive ; pub use super :: bindgen :: root :: vanetza :: InputArchive ; pub use super :: bindgen :: root :: vanetza :: OsiLayer ; pub use super :: bindgen :: root :: vanetza :: ByteBufferConvertible ; pub use super :: bindgen :: root :: vanetza :: ByteBuffer ; pub mod aid { pub use super :: super :: bindgen :: root :: vanetza :: aid :: CA ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: DEN ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: TLM ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: RLT ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: IVI ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: TLC_R ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: TLC_S ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: GN_MGMT ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: CRL ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: SCR ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: CTL ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: VRU ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: CP ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: IMZ ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: SA ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: GPC ; pub use super :: super :: bindgen :: root :: vanetza :: aid :: IPV6_ROUTING ; } pub mod btp { pub use super :: super :: bindgen :: root :: vanetza :: btp :: HeaderA ; pub use super :: super :: bindgen :: root :: vanetza :: btp :: HeaderB ; pub use super :: super :: bindgen :: root :: vanetza :: btp :: DataRequestGeoNetParams ; pub use super :: super :: bindgen :: root :: vanetza :: btp :: DataRequestA ; pub use super :: super :: bindgen :: root :: vanetza :: btp :: DataRequestB ; pub use super :: super :: cxxbridge :: serialize ; pub use super :: super :: cxxbridge :: deserialize ; } pub mod dcc { pub use super :: super :: bindgen :: root :: vanetza :: dcc :: RequestInterface ; } pub mod geonet { pub use super :: super :: bindgen :: root :: vanetza :: geonet :: StationType ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Address ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: LongPositionVector ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: ShortPositionVector ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Lifetime ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: TrafficClass ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: UnicastForwarding ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: BroadcastForwarding ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: AddrConfMethod ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: InterfaceType ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: SecurityDecapHandling ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: ManagementInformationBase ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: CartesianPosition ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: GeodeticPosition ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Circle ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Rectangle ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Ellipse ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Area ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: UpperProtocol ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: TransportType ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataRequestWithAddress ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataRequestWithArea ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: GucDataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: GbcDataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: GacDataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: ShbDataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: TsbDataRequest ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Router ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataConfirm ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataConfirm_ResultCode ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: TransportInterface ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DataIndication ; pub use super :: super :: cxxbridge :: geometric_function ; pub use super :: super :: cxxbridge :: geometric_function1 ; pub use super :: super :: cxxbridge :: geometric_function2 ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: local_cartesian ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: inside_or_at_border ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: Router_DownPacketPtr ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: DccFieldGenerator ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: MIB ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: CbfPacketBuffer ; pub use super :: super :: bindgen :: root :: vanetza :: geonet :: LocationTable ; } pub mod security { pub use super :: super :: bindgen :: root :: vanetza :: security :: SecurityEntity ; } } pub mod vanetza_wrapper { pub use super :: bindgen :: root :: vanetza_wrapper :: PacketVariantWrapper ; pub mod btp { pub use super :: super :: bindgen :: root :: vanetza_wrapper :: btp :: BtpDataIndicationWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: btp :: BTPIndicationInterfaceWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: btp :: BTPRequestInterfaceWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: btp :: HeaderB_wrapper ; } pub mod convertible { pub use super :: super :: bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderAbyte_buffer_implWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: convertible :: BTPHeaderBbyte_buffer_implWrapper ; } pub mod geonet { pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: GeonetAreaWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: GeodeticPositionWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: CartesianPositionWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: CircleWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: RectangleWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: EllipseWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: RouterRef ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: distance ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: canonicalize ; pub use super :: super :: cxxbridge :: vanetza_wrapper_geonet_inside_or_at_border as inside_or_at_border ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: geonet :: area_size ; } pub mod units { pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: AccelerationWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: AngleWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: GeoAngleWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: TrueNorthWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: AngularVelocityWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: AreaWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: CurvatureWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: FrequencyWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: LengthWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: DurationWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: VelocityWrapper ; pub use super :: super :: bindgen :: root :: vanetza_wrapper :: units :: NauticalVelocityWrapper ; } } }